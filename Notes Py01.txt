a, b, c, d = 43, 43.0, 43.75, str(43.75)
e, f, g = float(43), float("43.75"), int(43.75)
s = f"a = {a:<12}{type(a)}\nb = {b:<12}{type(b)}\n" + \
    f"c = {c:<12}{type(c)}\nd = {d:<12}{type(d)}\n" + \
    f"e = {e:<12}{type(e)}\nf = {f:<12}{type(f)}\ng = {g:<12}{type(g)}"
print(s)

a, b, c, d = 15 + 27, 7 - 34, 3 * 5, 3 * 5.0
e, f, g, h = 21 / 3, 21 // 3, 21 // 5, 21 % 5
print(f"a = {a:<9}{type(a)}\nb = {b:<9}{type(b)}")
print(f"c = {c:<9}{type(c)}\nd = {d:<9}{type(d)}")
print(f"e = {e:<9}{type(e)}\nf = {f:<9}{type(f)}")
print(f"g = {g:<9}{type(g)}\nh = {h:<9}{type(h)}")

x = 23.7581
print(f"'{x:25}'\n'{x:<25}'\n'{x:>25}'\n'{x:^25}'")
print(f"'{x:*<25}'\n'{x:*>25}'\n'{x:*^25}'")

a, b, c = 1549 / 16, 1549 // 16, 1549 % 16
print("a = %-12.4f %s" % (a, type(a)))
print("b = %-12d %s" % (b, type(b)))
print("c = %-12d %s\n" % (c, type(c)))
print("a = {:<12} {}".format(a, type(a)))
print("b = {:<12} {}".format(b, type(b)))
print("c = {:<12} {}\n".format(c, type(c)))
print(f"a = {a:<12} {type(a)}")
print(f"b = {b:<12} {type(b)}")
print(f"c = {c:<12} {type(c)}\n")
s = f"a = {a:<12} {type(a)}\n" + \
    f"b = {b:<12} {type(b)}\n" + \
    f"c = {c:<12} {type(c)}\n"
print(s)

a = 0xFDE8
# a = 0b1111110111101000
# a = 65000
# a = int("fde8",16)
# a = int("1111110111101000",2)
b, c, d = str(a), hex(a), bin(a)
s1 = f"a = {a:<25}{type(a)}\nb = {b:<25}{type(b)}\n" + \
     f"c = {c:<25}{type(c)}\nd = {d:<25}{type(d)}\n"
s2 = f"a = {a}\na = {a:x}\na = {a:X}\na = {a:b}"
print(s1, s2, sep="\n")

a = 500
print("%15X : %d" % (id(a),a))
a = 350
print("%15X : %d" % (id(a),a))
a += 150
print("%15X : %d" % (id(a),a))
a = 500
print("%15X : %d" % (id(a),a))

a = b = c = 1500
print(f"{id(a):15X} : {a}")
print(f"{id(b):15X} : {b}")
print(f"{id(c):15X} : {c}\n")
b = c = 3750
print(f"{id(a):15X} : {a}")
print(f"{id(b):15X} : {b}")
print(f"{id(c):15X} : {c}\n")
c = 1453
print(f"{id(a):15X} : {a}")
print(f"{id(b):15X} : {b}")
print(f"{id(c):15X} : {c}\n")

# (a, b, c) = (43, 27, 27)
a, b, c = 43, 27, 27
d = b
print(f"a = {a}, id = {id(a):#X}")
print(f"b = {b}, id = {id(b):#X}")
print(f"c = {c}, id = {id(c):#X}")
print(f"d = {d}, id = {id(d):#X}\n")
a -= 4
d += 12
print(f"a = {a}, id = {id(a):#X}")
print(f"b = {b}, id = {id(b):#X}")
print(f"c = {c}, id = {id(c):#X}")
print(f"d = {d}, id = {id(d):#X}")

# (a, b, c) = (435.12, 736.35, 612.43)
a, b, c = 435.12, 736.35, 612.43
print("{:10}{:10}{:10}".format(a, b, c))
print("{1:10}{2:10}{0:10}".format(a, b, c))
a, b, c = b, c, a
print("{:10}{:10}{:10}\n".format(a, b, c))

a = 243
b = 3**5
c = pow(3, 5)
print(f"a = {a:<6}{type(a)}{hex(id(a)):>16}")
print(f"b = {b:<6}{type(b)}{hex(id(b)):>16}")
print(f"c = {c:<6}{type(c)}{hex(id(c)):>16}")

a = 625**0.5
b = pow(625, 0.5)
c = 25.0
d = 125**(1/3)
e = pow(125, 1/3)
f = 5.0
print(f"a = {a:<9}{type(a)}{hex(id(a)):>16}")
print(f"b = {b:<9}{type(b)}{hex(id(b)):>16}")
print(f"c = {c:<9}{type(c)}{hex(id(c)):>16}\n")
print(f"d = {d:<9}{type(d)}{hex(id(d)):>16}")
print(f"e = {e:<9}{type(e)}{hex(id(e)):>16}")
print(f"f = {f:<9}{type(f)}{hex(id(f)):>16}")
s = "TBMM"
print(s)
print(*s)
print(*s, sep=".", end=".\n")

a = ["5", "10", "2023"]
b = type(a)
c = type(b)
d = "/".join(a)
e = type(d)
f = type(e)
print(f"{a}\n{b}\n{c}\n{d}\n{e}\n{f}\n")

a = 10.758265
print("a : %12.4f" % a)
print("a : %012.4f" % a)
print("a : %-12.4f" % a)
print("a : %12d" % a)
print("a : %012d" % a)
print("a : %-12d\n" % a)

# (a, *b, c) = (43, 24, 35.7, 61, 82, 17, 54.8)
a, *b, c = 43, 24, 35.7, 61, 82, 17, 54.8
print(a, type(a))
print(b, type(b))
print(c, type(c))

a = [6, 7, 4, 5, 9]
b = [6, 7, 4, 5, 9]
c = a
print(a, hex(id(a)))
print(b, hex(id(b)))
print(c, hex(id(c)))
print(a is b)
print(a == b)
print(a is c)
print(a == c)
for i in range(len(a)):
    print(f"{i}.Eleman")
    print(a[i],hex(id(a[i])))
    print(b[i],hex(id(b[i])))

a = [3, 7, 5, 9, 6, 15]
b = a
c = 1*a
d = [] + a
e = a.copy()
print(a, hex(id(a)))
print(b, hex(id(b)))
print(c, hex(id(c)))
print(d, hex(id(d)))
print(e, hex(id(e)))
a[-2], b[-2], c[-2], d[-2], e[-2] = \
    100, 200, 300, 400, 500
print(a, hex(id(a)))
print(b, hex(id(b)))
print(c, hex(id(c)))
print(d, hex(id(d)))
print(e, hex(id(e)))

a = [4, 7, 13]
b = 2*a
c = a + b
print(a, hex(id(a)), sep="\n", end="\n\n")
print(b, hex(id(b)), sep="\n", end="\n\n")
print(c, hex(id(c)), sep="\n", end="\n\n")

a, s = 1e3 + 2 / 3, 25*"-"
print(a, s, sep="\n")
s1 = "{0:f}\n{0:.12f}\n{0:25f}\n{0:25.12f}".format(a)
s2 = "{0:g}\n{0:.12g}\n{0:25g}\n{0:25.12g}".format(a)
s3 = "{0:e}\n{0:.12e}\n{0:25e}\n{0:25.12e}".format(a)
s4 = "%f\n%.12f\n%25f\n%25.12f" % (a, a, a, a)
print(s1, s, s2, s, s3, s, s4, s, sep="\n")

a = 10
b = (a**0.5)**2
print(f"a = {a:.20f}")
print(f"b = {b:.20f}")
print(f"f = {a-b:.20e}")
print(a == b)
a = 0.3
print(f"a = {a}")
print(f"a = {a:.20f}")

a = 15/4*13
b = (15/4)*13
c = 4**2**3
d = 4**(2**3)
e = 3*2**10/2**4
f = 3*(2**10)/(2**4)
print(f"a = {a:<9}{type(a)}")
print(f"b = {b:<9}{type(b)}")
print(f"c = {c:<9}{type(c)}")
print(f"d = {d:<9}{type(d)}")
print(f"e = {e:<9}{type(e)}")
print(f"f = {f:<9}{type(f)}")

a = 43000
s = "{:12d}\n".format(a) + \
    "{:>12s}\n".format(hex(a)) + \
    "{:#12x}\n".format(a) + \
    "{:#12X}\n".format(a) + \
    format(a, "#12x") + "\n" + \
    format(a, "#12X") + "\n" + \
    f"{a:#12x}\n{a:#12X}\n" + \
    "%#12x\n%#12X" % (a, a)
print(s)

a = 43000
s = "{:25d}\n".format(a) + \
    "{:>25s}\n".format(bin(a)) + \
    "{:25b}\n".format(a) + \
    "{:#25b}\n".format(a) + \
    format(a, "#25b") + "\n" + \
    f"{a:#25b}\n"
print(s)

a = 2**15 - 1 - 2**10 - 2**5
s = f"{a:20d}\n{a:#20b}\n{a:#20o}\n{a:#20x}\n{a:#20X}"
print(s)

s = "3.14".zfill(15)
print(s, type(s))

a = [7, 5, 1, 4, 1, 9, 11, 7, 4, 3]
b = (7, 5, 1, 4, 1, 9, 11, 7, 4, 3)
c = 7, 5, 1, 4, 1, 9, 11, 7, 4, 3
d = {7, 5, 1, 4, 1, 9, 11, 7, 4, 3}
print(f"{a}\n{type(a)}\n")
print(f"{b}\n{type(b)}\n")
print(f"{c}\n{type(c)}\n")
print(f"{d}\n{type(d)}\n")
print(9 in d)
print(15 in d)

a = [7, 5, 1, 4, 1, 9, 11, 7, 4, 3]
b = tuple(a)
c = list(b)
d = set(a)
e = list(d)
print(f"{a}\n{type(a)}\n")
print(f"{b}\n{type(b)}\n")
print(f"{c}\n{type(c)}\n")
print(f"{d}\n{type(d)}\n")
print(f"{e}\n{type(e)}\n")

a = range(10)
b = list(a)
c = set(a)
d = tuple(a)
print(f"{a}\n{type(a)}\n")
print(f"{b}\n{type(b)}\n")
print(f"{c}\n{type(c)}\n")
print(f"{d}\n{type(d)}\n")

a = None
b = "Hasan TEMURTAŞ"
print(a, type(a))
print(b, type(b))

x = int(1e15)
# x = 2 ** 50 - 1
print(x, type(x))
print(x.numerator, type(x.numerator))
print(x.bit_length())

x, y = 3, 5
a = x == y
b = x != y
c = x > y
d = x >= y
e = x < y
f = x <= y
print(a, b, c, d, e, f, sep="\n")

a, b, c = 10, 15, 20
print(a < b < c)
print(not a < b < c)
print(a < c > b)
print(not a < c > b)
print(a < b and b < c)
print(not (a < b and b < c))
print(not a < b or not b < c)

a = int(False)
print(a, type(a))
a = int(True)
print(a, type(a))
a = 5 + True
print(a, type(a))
a = 10*True
print(a, type(a))
a, b = 4, 5
c = a <= b
print(c, type(c))
c = not a <= b
print(c, type(c))
c = a > b
print(c, type(c))

a = bool("")
print(a, type(a))
a = bool("Ankara")
print(a, type(a))
a = bool(0)
print(a, type(a))
a = bool(15)
print(a, type(a))
a = bool(-15)
print(a, type(a))
a = bool(0.0)
print(a, type(a))
a = bool(0.7)
print(a, type(a))
a = bool(1e-25)
print(a, type(a))

a = b = c = "Apple"
c += " Banana"
print(f"{a}{id(a):#23X}")
print(f"{b}{id(b):#23X}")
print(f"{c}{id(c):#16X}")
print(a is b)
print(a is c)

a, b = True, False
print("Logical Operators")
print("      a =", a)
print("      b =", b)
print("  not a =", not a)
print("  not b =", not b)
print("a and b =", a and b)
print(" a or b =", a or b)

x, y = 0b1010110101, -0b0110100110
print("Bitwise Operators")
print("     x :", x)
print("     y :", y)
print("    ~x :", ~x)
print("    ~y :", ~y)
print(" x & y :", x & y)
print(" x | y :", x | y)
print(" x ^ y :", x ^ y)
print(" x ^ y :", ~x & y | x & ~y)
print("x << 2 :", x << 3)
print("y >> 2 :", y >> 3)

a = ~43 + 1
b = 0o77
c = 0xFF
d = 43 ^ 105
e = 43 & 105
f = 43 | 105
print(a, b, c, d, e, f, sep="\n")

a = 52387
b = -23564
c = a & b
d = a | b
e = a ^ b
f = ~a + 1
g = ~b + 1
print(f"a : {a:#20b} : {a:7}")
print(f"b : {b:#20b} : {b:7}")
print(f"c : {c:#20b} : {c:7}")
print(f"d : {d:#20b} : {d:7}")
print(f"e : {e:#20b} : {e:7}")
print(f"f : {f:#20b} : {f:7}")
print(f"g : {g:#20b} : {g:7}")

a = 1
b = a << 30
c = b >> 20
d = b
d >>= 20 # d = d >> 20
print(f"a: {a}\nb: {b}\nc: {c}\nd: {d}")

a = {5, 1, 6, 3, 4, 0, 2}
b = {4, 5, 9, 7, 6, 8}
c = a - b
d = b - a
e = a | b
f = a & b
g = a ^ b
print(a, b, c, d, e, f, g, sep="\n")

a = {5, 1, 6, 3, 4, 0, 2}
b = {3, 4, 5, 9, 7, 6, 8}
print(f"{a}\n{b}\n")
a.add(3)
a.add(7)
b.discard(2)
b.discard(3)
c = a.difference(b)
d = b.difference(a)
e = a.union(b)
f = a.intersection(b)
print(a, b, c, d, e, f, sep="\n")

a = 34.7457654
s = "%12d\n%12.3f\n%12.9f" % (a, a, a)
print(s)

a = 4.37597823
b = -a
s1 = "%-9.3f\n%+9.3f\n%9.3f\n%09.3f"\
    % (a, a, a, a)
s2 = "%-9.3f\n%+9.3f\n%9.3f\n%09.3f"\
    % (b, b, b, b)
print(s1+ "\n\n" + s2)

s = "ŞşÇçÖöĞğÜüİı"
print(f"{s}\t{type(s)}")
for i in s:
    print(f"{i:>4} : {ord(i)}\t{type(i)}")

for i in range(32, 127):
    print(f"{i:5d} : {i:#X} : '{chr(i):s}'")

a = "\x41\x5A\x61\x7AŞş"
print(a, type(a))
print(*a)
b = list(a)
print(b)
n = len(b)
print(" Uzunluk : ", n)
for i in range(n):
    c = b[i]
    print(f"{c} : {ord(c):#5X} : {ord(c):3}")

a = "has.*.an.*.temur.*.taş.*."
b = a.split('.*.')
c = a.split('.*.',3)
d = " ".join(b)
print(a, type(a), sep="\n", end="\n\n")
print(b, type(b), sep="\n", end="\n\n")
print(c, type(c), sep="\n", end="\n\n")
print(d, type(d), sep="\n")

a = "  \n  Python  \n\tProgramlama" + \
    "\n  Dili   \nHasan Temurtaş   "
b = a.split()
c = " ".join(b)
print("/", a, "/", sep="")
print(b)
print("/", c, "/", sep="")

a = "Hasan Temurtaş\n\n" + \
    "Kütahya Dumlupınar Üniversitesi\n" + \
    "Bilgisayar Mühendisliği Bölümü\n"
b = a.splitlines()
print(a, type(a), sep="\n", end="\n\n")
print(b, type(b), sep="\n")

a = "       Python     Programlama    "
b = a.split()
c = a.split(' ')
d = a.split(" ")
print(f"/{a}/\n\n{b}\n\n{c}\n\n{d}")

a = "       Python     Programlama    "
b = a.strip()
c = a.lstrip()
d = a.rstrip()
e = a.strip(" ")
print(f"/{a}/\n\n{b}\n\n{c}\n\n{d}\n\n{e}")

a = "Python   Programlama    Dili"
b = a.replace(" ","-")
print(a, b, sep="\n")

a = "HaSaN?!/345ŞÇIİiığüö"
b = a.swapcase()
print(a, b, sep="\n")

s1 = "Python\nProgramlama\nDili"
s2 = repr(s1)
s3 = str(s2)
s4 = r"Python\nProgramlama\nDili"
s5 = str(s4)
print(f"{s1}\n{type(s1)}")
print(25*"-")
print(f"{s2}\n{type(s2)}\n")
print(f"{s3}\n{type(s3)}\n")
print(f"{s4}\n{type(s4)}\n")
print(f"{s5}\n{type(s5)}\n")

s1 = "Python Programlama Dili"
n = s1.find("gram")
print(f"{s1}\n{n}")
if n >= 0:
    s2 = s1[:n]
    s3 = s1[n:]
    print(f"{s2}\n{s3}")

a = "Python Programlama Dili"
b = a.upper()
c = a.lower()
d = a.startswith("Pr")
e = a.endswith("ili")
print(a, b, c, d, e, sep="\n")

s1 = "Ahmet"
s2 = "Hasan"
print("{0} - {1} - {0}".format(s1, s2))
print("{1} - {0} - {1}".format(s1, s2))

a = range(10)
b = list(a)
print(a, type(a), sep="\n", end="\n\n")
print(b, type(b), sep="\n", end="\n\n")
print(*a)
print(*b)

a = [4, 1, [6, 5, 8], 4, [9, 7]]
b = str(a)
print(f"{a}\n{type(a)}\n{a[2][1]}\n")
print(f"{b}\n{type(b)}\n|{b[14:24]}|")

s1 = "Ahmet'in Kalemi"
s2 = 'Ahmet"in Kalemi'
s3 = 'Ahmet\'in Kalemi'
s4 = "Ahmet\"in Kalemi"
print(s1, s2, s3, s4, sep="\n")

s1 = "haSan'nın kaLEmi"
# s1 = 'haSan\'nın kaLEmi'
s2 = s1.upper()
s3 = s1.lower()
s4 = s1.title()
s5 = s1.swapcase()
s6 = s1.capitalize()
print(s1, s2, s3, s4, s5, s6, sep="\n")

s1 = "hasan temurtaş"
s2 = s1.title()
s3 = s2.replace("Hasan", "Mehmet")
s4 = 5*"Ali"
print(s1, s2, s3, s4, sep="\n")

s = "Hasan".ljust(15) + "*"
s += "6725".rjust(10) + "\n"
s += "Serdar".ljust(15) + "*"
s += "147".rjust(10) + "\n"
s += "Muhammed".ljust(15) + "*"
s += "53462".rjust(10)
print(s)

a = round(0.123456, 4)
b = round(0.123456)
c = round(0.5)
d = round(0.5 + 1e-12)
e = round(-0.5)
f = round(-0.5 - 1e-12)
g = round(3.5)
h = round(3.5 - 1e-12)
print(f"a = {a:9} {type(a)}")
print(f"b = {b:9} {type(b)}")
print(f"c = {c:9} {type(c)}")
print(f"d = {d:9} {type(d)}")
print(f"e = {e:9} {type(e)}")
print(f"f = {f:9} {type(f)}")
print(f"g = {g:9} {type(g)}")
print(f"h = {h:9} {type(h)}")

a, b, c = 0.1, 0.2, 0.3
d = a + b
print(a, b, c, d, sep="\n")
print(c == d, end="\n\n")
a, b, c = 1.2, 2.3, 3.5
d = a + b
print(a, b, c, d, sep="\n")
print(c == d)

a = 1e18
b = 1e6
c = a + b
d = c - a
e = (3**0.5)**2
print("a : %25.18e" % a)
print("b : %25.18e" % b)
print("c : %25.18e" % c)
print("d : %25.18e" % d)
print("e : %25.18e" % e)

x = ["A", "B", "C"]
y = ["D", "E"]
z = [1, 2, 3, 4]
w = [x, y, z]
a = x + y + z
print(w)
print(w[0])
print(w[1][1])
print(w[2][3])
print(a)
print(a[3])
print(a[:3])
print(a[3:])

a = [3, 5, 8]
b = a
c = a.copy()
a.append(100)
b.append(200)
c.append(300)
print(a, b, c, sep="\n")

a = [3, 43, 7, 29, 15, 27, 15, 15, 25]
print(a)
x = a.index(15)
y = a.count(15)
print(x, y, sep="\n")
a.insert(2, 100)
print(a)
a.pop(5)
print(a)
a.remove(15)
print(a)
a.pop()
print(a)

a = [13, 24, 9, 7, 15, 63, 67, 43, 75, 47, 19, 27]
print(a)
del a[8:]
print(a)
del a[:3]
print(a)

a = [15, 63, 67, 43]
b = a.copy()
c = b
d = a.copy()
e = [18, 23, 62, 45]
c.extend(e)
d += e
print(f"{a}{id(a):#32X}")
print(f"{b}{id(b):#16X}")
print(f"{c}{id(c):#16X}")
print(f"{d}{id(d):#16X}")

a = [63, 71]
print(a)
a.extend([15, 27, 43])
a += [9, 12, 54]
print(a)
a.pop()
a.pop(2)
a.append(45)
a.insert(1, 100)
print(a)
a.clear()
print(a)

a = [1, 2, 3, 4, 5, 6]
b = a[:-1]
c = a[::-1]
d = a.copy()
d.reverse()
print(a, b, c, d, sep="\n")

s1 = "0123456789"
s2 = s1[::-1]
print(s1,s2,sep="\n")

a = "Ankara Adana"
b = a.lower()
c = b.count("a")
print(f"{a}, {id(a):#X}")
print(f"{b}, {id(b):#X}")
print(f"{c}, {id(c):#X}")

a = "Kütahya Dumlupınar Üniversitesi"
b = a.find("a")
c = a.rfind("a")
print(a, b, c, sep="\n")

a = "Hasan"
b = a.replace("san", "kan")
print(f"{a}, {id(a):#X}")
print(f"{b}, {id(b):#X}")

s = "ABCABCXYZABCXBB"
a = s.count("B")
b = s.find("XYZ")
c = s.find("ZXY")
d = s.rfind("CX")
print(a, b, c, d, sep="\n")

a = "abc45?&şğ".islower()
b = "12".isnumeric()
c = "12.7".isnumeric()
d = "12".isdecimal()
e = "12.7".isdecimal()
f = "A12b".isalnum()
g = "   \n  \t  ".isspace()
print(a, b, c, d, e, f, g, sep="\n")

def FncFloat(x):
    try:
        return float(x)
    except ValueError:
        return
a = ["Hasan", 17.45, 738, "Ahmet"]
for i in range(len(a)):
    x = a[i]
    y = FncFloat(a[i])
    print(f"{x:<12} {str(y):>10}")

print("  a  b    c  d  e")
print(18*"-")
for i in range(4):
    a, b = i > 1, i % 2 == 1
    c, d = a and b, a or b
    e = not a and b or a and not b
    print(f"{a:3}{b:3}{c:5}{d:3}{e:3}")

s = "Ankara Başkent"
a = list(s)
b = set(s)
c = set(a)
print(f"{s} {type(s)}\n")
print(f"{a} {type(a)}\n")
print(f"{b} {type(b)}\n")
print(f"{c} {type(c)}\n")

a = ()
b = ("Hasan", 7, 6, "Ahmet", 8.3, 25)
c, *d, e, f = b
print(a, type(a), end="\n\n")
print(b, type(b), sep="\n", end="\n\n")
print(c, type(c), end="\n\n")
print(d, type(d), end="\n\n")
print(e, type(e), end="\n\n")
print(f, type(f))

a = list()
b = tuple()
c = set()
d = dict()
e = {5, 1, 6}
f = {5:3, 7:2, 9:6}
s = f"a = {a}\nL = {len(a)}\n{type(a)}\n\n" + \
    f"b = {b}\nL = {len(b)}\n{type(b)}\n\n" + \
    f"c = {c}\nL = {len(c)}\n{type(c)}\n\n" + \
    f"d = {d}\nL = {len(d)}\n{type(d)}\n\n" + \
    f"e = {e}\nL = {len(e)}\n{type(e)}\n\n" + \
    f"f = {f}\nL = {len(f)}\n{type(f)}\n"
print(s)

s = "Hasan"
a = list(s)
print(a, type(a), sep="\n", end="\n\n")
a.clear()
print(a, type(a), sep="\n", end="\n\n")
a = set(s)
print(a, type(a), sep="\n", end="\n\n")
a.clear()
print(a, type(a), sep="\n", end="\n\n")
a = {10, 3, 10, 8, 5, 8, 7, 7, 10}
print(a, type(a), sep="\n", end="\n\n")
a = set()
print(a, type(a), sep="\n")

a = {}
print(f"{a}\n{type(a)}\n")
a = {"Pazartesi":"Monday", "Çarşamba":"Wednesday"}
print(f"{a}\n{type(a)}\n")
a["Salı"] = [2, "Tuesday"]
a["Cuma"] = "Friday"
print(f"{a}\n{type(a)}\n")
print(a["Cuma"])
print(a["Salı"])
print(a["Salı"][0])
print(a["Salı"][1])

a = {"Ahmet", 15, "Serdar", "Hasan", 25}
b = {25, "Hasan", "Ahmet", 15, "Serdar"}
c = a
d = a.copy()
print(f"{a}\n{type(a)}\n")
print(f"{b}\n{type(b)}\n")
print(f"{c}\n{type(c)}\n")
print(f"{d}\n{type(d)}\n")
print(a is b, a == b)
print(a is c, a == c)
print(a is d, a == d)
print(b is d, b == d)

a = [3, 9, 25, 6]
b = [3, 9, 17, 9, 12]
print(a, type(a))
print(b, type(b))
print(a > b, a < b)

a = (1, 2, 3, 45) < (1, 2, 4)
print(a, type(a))
a = (1, 4, 9, 25) < (1, 5, 7)
print(a, type(a))
a = "hasan" < "zeki" > "zehra"
print(a, type(a))
a = "zeki" > "çetin"
print(a, type(a))

a = {"Elma", "Armut", "Muz", "Kiraz"}
print(f"{a}\n{type(a)}\n")
a.add("Şeftali")
a.add("Armut")
a.add("Üzüm")
a.discard("Muz")
print(f"{a}\n{type(a)}\n")
for x in a:
    print(x)

i = 100
print("Before :", i)
for i in range(5, 25, 3):
    print(i)
    # if i == 17: break
else:
    print("  Else :", i)
print(" After :", i)

x = 1
while x < 10:
    print(x, end=", ")
    x += 1
else: print(x)
print(x)

for i in range(21):
    if i in [5, 10, 8, 2, 1, 13, 7, 17]:
        continue
    if i == 15: break
    print(i)
else: print(i, "Durum1")
print(i, "Durum2")

a = 45
while a <= 95:
    a += 5
    print(a)
else:
    a -= 25
    print(a)
print(a)

for i in range(1, 11):
    for j in range(1, 11):
        print(f"{i*j:5}", end="")
    print()

a = [i for i in range(40) if i % 3 == 0]
b = [i for i in range(0,40,3)]
print(a, type(a), sep="\n")
print(b, type(b), sep="\n")

a = [i % 5 for i in range(15)]
b = [i % 5 > 2 for i in range(15)]
print(a, b, sep="\n")

print("     ", end="")
for i in range(1, 11):
    print(f"{i:4}", end="")
print("\n    |", 39*"-")
for i in range(1, 11):
    print(f"{i:3} |", end="")
    for j in range(1, 11):
        print(f"{i*j:4}", end="")
    print()

a = {i: i*i for i in range(1,6)}
b = [i for i in range(10)]
print(a, type(a), sep="\n")
print("", b, type(b), sep="\n")

for i in range(-5, 7, 3):
    for j in range(10, 0, -4):
        print(i, j)
    print("-----")

a = {27, 54, 13, 27, 25, 16, 13, 13, 17, 13}
print(a, type(a), sep="\n", end="\n\n")
b = 13 in a
print(b, type(b))

n = 10
for i in range(n):
    for j in range(n-i-1):
        print(" ", end="")
    for j in range(2*i+1):
        print("X", end="")
    print()

n = 3
for i in range(n):
    for j in range(n):
        for k in range(n):
            print(i, j, k)

for c in "Python":
    print(c)
else:
    print("Bitti :", c)
print("Bitti :", c)

a = "Python"
print(*a, sep="\n")
for c in a:
    print(c, "-->", ord(c))
print(list(a))

s = "Python Programlama Dersi"
print(s)
print("Uzunluk :", len(s))
for i in range(len(s)):
    print(f"{s[i]:>7} : {ord(s[i]):5}")

for x in range(1, 11):
    print("%3d %4d %16.12f" % (x, x**2, x**0.5))
else:
    print("Bitti :", x)
print("Bitti :", x)

mt1 = str.maketrans("masnet", "123456")
mt2 = str.maketrans("123456", "masnet")
s1 = "Hasan Temurtaş"
s2 = s1.translate(mt1)
s3 = s2.translate(mt2)
print(mt1, type(mt1), sep="\n", end="\n\n")
print(mt2, type(mt2), sep="\n", end="\n\n")
print(s1, type(s1), sep="\n", end="\n\n")
print(s2, type(s2), sep="\n", end="\n\n")
print(s3, type(s3), sep="\n")

a = ["a","n","k","r"]
b = {}
for i in range(len(a)):
    b[ord(a[i])] = i + 49
c = "ankara".translate(b)
print(a, type(a), sep="\n")
print(b, type(b), sep="\n")
print(c, type(c), sep="\n")

a = 5 in [1, 2, 3, 4]
b = 0 in range(10)
c = 10 in range(10)
d = "y" in "Python"
print(a, b, c, d, sep="\n")

a = list()
for x in range(10):
    a.append(x**2)
b = [x**2 for x in range(10)]
print(a, type(a), sep="\n", end="\n\n")
print(b, type(b), sep="\n", end="\n\n")
print(a == b, a is b, sep="\n")

a = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]
b = [i*j*k for i, j, k in a]
print(f"{a}\n{b}\n")
for i in range(len(a)):
    print(f"{str(a[i]):>15} --> {b[i]:5}")

for x in range(1, 11):
    s1 = str(x)
    s2 = str(x**2)
    s3 = str(x**3)
    print(s1.rjust(5), s2.rjust(6), s3.rjust(7))
print()
for x in range(1, 11):
    print("%5d %6d %7d" % (x, x**2, x**3))
print()
for x in range(1, 11):
    print("{:5} {:6} {:7}".format(x, x**2, x**3))
print()
for x in range(1, 11):
    print(f"{x:5} {x**2:6} {x**3:7}")

a = b = ["Ankara", "Kütahya"]
c = a
d = ["Ankara", "Kütahya"]
print(f"{a}\t{id(a):#X}")
print(f"{b}\t{id(b):#X}")
print(f"{c}\t{id(c):#X}")
print(f"{d}\t{id(d):#X}")
print(a is b, a is c, a is d)
print(a == b, a == c, a == d)
print(a is not b, a is not c, a is not d)
print(a != b, a != c, a != d)
print("Kütahya" in a, "Kütahya" not in a)
print("Antalya" in a, "Antalya" not in a)

a = [i**2 for i in range(10)]
print(f"{a}\n{type(a)}")
del a[3:7]
print(f"{a}\n{type(a)}")
a.remove(64)
print(f"{a}\n{type(a)}")
b = 64 in a
print(f"{b}\n{type(b)}")
c = 49 in a
print(f"{c}\n{type(c)}")

a = [-15.257483, 0.0, 15.257483]
for x in a:
    if x < 0:
        print(f"{x:9.5g} : Negatif")
    elif x == 0:
        print(f"{x:9.5g} : Sıfır")
    else:
        print(f"{x:9.5g} : Pozitif")

a = [[25, 67, 92, 76], [87, 39, 49], [41, 45, 97, 32, 61]]
print(a, end="\n\n")
for x in a:
    for y in x:
        print(f"{y:4d}", end="")
    print()

print("f(x,y,z) = 3*x - 5*y + 4*z")
print("    x    y    z")
for x in range(-5, 6):
    for y in range(-5, 6):
        for z in range(-5, 6):
            f = 3*x - 5*y + 4*z
            if f == 0:
                print("%5d%5d%5d" % (x, y, z))

s1 = "AaZzÇçĞğIıİiŞşĞğÖöÜü"
s2 = s1.encode("utf-8")
s3 = s2.decode("utf-8")
print(s1, type(s1), len(s1), sep="\n")
print(s2, type(s2), len(s2), sep="\n")
print(s3, type(s3), len(s3), sep="\n")

a = [45, 67, 83, 24, 75]
print(f"{a} {id(a):>#30X}")
a += [27, 15, 45, 29]
print(f"{a} {id(a):>#14X}")
del a[0:4]
print(f"{a} {id(a):>#30X}\n")
for x in a:
    print(f"{x:3} {id(x):>#18X}")
print()
a[2] = 75
a[3] = 255
for x in a:
    print(f"{x:3} {id(x):>#18X}")

a = [[1, 2], (3, 4), {5, 6}]
for x in a:
    print(x, type(x))
for i, j in a:
    print(f"{i:2},{j:2}")

a = [["Hasan", 80, 75], ["Recep", 90, 73], ["Eda", 17, 95]]
print(a, end="\n\n")
for x in a:
    print(x)
print()
for n in range(len(a)):
    for m in range(len(a[n])):
        print(f"{a[n][m]:6}", end="")
    print()

a = [False, False, False, False]
b = [False, True, False, False]
c = [True, True, True, True]
print(a, any(a), all(a), sep="\n")
print(b, any(b), all(b), sep="\n")
print(c, any(c), all(c), sep="\n")

a = [7, 3, 9, 15, 19, 43, 16]
b = min(a)
c = max(a)
d = sum(a)
e = sum(a) / len(a)
print(a, b, c, d, e, sep="\n")

s = "abcABCçÇğĞşŞxyzXYZ"
x = min(s)
y = max(s)
print(x, ord(x))
print(y, ord(y))

a = [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]
b = [x+y+z for x, y, z in a]
c = [sum(x) for x in a]
print(a, b, c, sep="\n")

a = [[67], [95, 17], [19, 87], [19, 43, 34]]
# a = [23, 41, 95, 19, 57, 64, 81, 29]
b = a.copy()
c = a.copy()
b.sort()
c.sort(reverse=True)
print(a, b, c, sep="\n")

a = [5, -7, 2, -9, 3.15, 6.7, -3, -4]
b = sorted(a)
c = sorted(a, reverse=True)
print(a, type(a), len(a))
print(b, type(b), len(b))
print(c, type(c), len(c))
x = min(a)
y = max(a)
print(x, type(x))
print(y, type(y))
i = a.index(x)
print(a[i], i)
i = a.index(y)
print(a[i], i)

a = [25, 43, 18, 95, 73, 13]
b = sorted(a)
c = a.copy()
c.sort()
print(f"{str(a):27} {id(a):#X}")
print(f"{str(b):27} {id(b):#X}")
print(f"{str(c):27} {id(c):#X}")

import random
n = 99
x = random.randint(1, n)
if x % 2 == 0:
    s = "Even"
else:
    s = "Odd"
print(x, s)
x = random.randint(1, n)
# Ternary Operator
s = "Even" if x % 2 == 0 else "Odd"
print(x, s)

a = [1, 2, 3, 4, 5, 6, 7]
b = ["Python", "Java", "Cpp", "Matlab", "CSharp"]
for x in zip(a, b):
    print(x)
for i, j in zip(a, b):
    print(i, j)

a = {"Elma":15,"Armut":25,"Kiraz":45,"Şeftali":30}
b = list(a.keys())
c = list(a.values())
print(a, b, c, sep="\n")

a = {}
print(a, type(a), sep="\n", end="\n\n")
a = {"Hasan":95, "Bilge":75, "Kamil":40}
print(a, type(a), sep="\n", end="\n\n")
s = "Bilge"
if s in a:
    b = a[s]
    print(b, type(b), sep="\n", end="\n\n")
b = a.keys()
print(b, type(b), sep="\n", end="\n\n")
b = a.values()
print(b, type(b), sep="\n", end="\n\n")
b = a.items()
print(b, type(b), sep="\n", end="\n\n")
c = list(b)
print(c, type(c), sep="\n", end="\n\n")

a = {"Sıfır":"Zero", "Bir":"One", "İki":"Two", "Üç":"Three"}
for x in a:
    print(f"{x:10} {a[x]}")

a = {"Sıfır":"Zero", "Bir":"One", "İki":"Two", "Üç":"Three"}
b = {"Dört":"Four", "Beş":"Five", "Altı":"Six"}
c = {"Yedi":"Seven", "Sekiz":"Eight", "Dokuz":"Nine"}
d = a.copy()
for x in b:
    d[x] = b[x]
for x in c:
    d[x] = c[x]
print(a, b, c, d, sep="\n")
for x in d:
    print(f"{x:>10}: {d[x]}")

a = 4 + 3j
b = complex(5, 2)
c = a * b
d = c / b
e = c / a
print(a, b, c, d, e, sep="\n")

z = 3 + 4j
x = z.real
y = z.imag
r = abs(z)
z1 = z.conjugate()
z2 = z * z1
print(f"z = {z:<18}{type(z)}")
print(f"x = {x:<18}{type(x)}")
print(f"y = {y:<18}{type(y)}")
print(f"r = {r:<18}{type(r)}")
print(f"z1 = {z1:<17}{type(z1)}")
print(f"z2 = {z2:<17}{type(z2)}")

z1 = complex(4, 5)
z2 = complex(3)
z3 = z1*z2
z4 = z1**2
z5 = pow(z1, 2)
print(z1, type(z1))
print(z2, type(z2))
print(z3, type(z3))
print(z4, type(z4))
print(z5, type(z5))

import math
a = math.inf
b = float("inf")
c = math.nan
d = float("nan")
print(a, type(a))
print(b, type(b))
print(c, type(c))
print(d, type(d))

s = "Banana"
for i in range(len(s)):
    print(s[i])
c = iter(s)
print(type(c))
for n in range(len(s)):
    print(next(c))

a = ["Hasan", "Ahmet", "Recep", "Sinan"]
for x in enumerate(a, start=1):
    print(x)
for i, j in enumerate(a):
    print(f"{i+1:2}, {j:>6}")

s = input("Bir Tamsayı Gir: ")
try:
    x = int(s)
    if x % 2 == 0:
        print(x, ": Çift Tamsayı")
    else:
        print(x, ": Tek Tamsayı")
except ValueError:
    print("Girilen Tamsayı Değil")

s1 = "[i**2 for i in range(10)]"
x = eval(s1)
y = 3
s2 = "y**0.5"
z = eval(s2)
print(x, type(x))
print(z, type(z))

import math
a = math.pi
b = math.sin(a/6)
print(f"{a} {type(a)}")
print(f"{b} {type(b)}")
print(f"{a:.30}\n{b:.30}")
print(f"{a:.3}\n{b:.3}")

a = [i for i in range(10)]
print(a)
f = lambda x : x**2
b = map(f, a)
c = list(b)
print(c)
d = f(5)
print(d)

f = lambda x: x % 2 == 1
y = f(17)
print(y, type(y), type(f), sep='\n')

FnkTers = lambda s: s[::-1]
s1 = 'Hasan Temurtaş'
s2 = FnkTers(s1)
print(s1, s2, sep='\n')

def Power1(x, n):
    return x**n
Power2 = lambda x, n: x**n
x, n = 10, 0.75
y1 = Power1(x, n)
y2 = Power2(x, n)
print(f"y1 : {y1}\ny2 : {y2}")

def Çarp1(x, y, z):
    return x * y * z
Çarp2 = lambda x, y, z: x * y * z
x = Çarp1(5, 7, 9)
y = Çarp2(5, 7, 9)
print(f"{x}\n{type(x)}\n{type(Çarp1)}")
print(f"{y}\n{type(y)}\n{type(Çarp2)}")

def Test(x, y):
    return x // y, x % y
a = Test(178, 10)
b, c = Test(178, 10)
print(a)
print(*a)
print(b, c)

kare = lambda x: x**2
lst = [5,7,4,9]
for x in lst:
    print(kare(x))
a = map(kare, lst)
print(f"\n{a}\n{type(a)}")
for x in a:
    print(x)
b = map(kare, range(1,10))
print(f"\n{b}\n{type(b)}")
for x in b:
    print(x)

def fonk1(a): # immutable
    a = 43
    print(a)
def fonk2(a): # immutable
    a = [54, 62, 73]
    print(a)
def fonk3(a): # mutable
    a[1] = 43
    print(a)
def fonk4(a): # mutable
    a += [54, 62, 73]
    print(a)
a = "Ankara"
print(a)
fonk1(a)
print(a)
a = ["Kütahya","Yozgat", "Afyon"]
print(a)
fonk2(a)
print(a)
fonk3(a)
print(a)
fonk4(a)
print(a)

def Fnk(*x, y="---"):
    return y.join(x)
a = Fnk("Kütahya","Ankara","Tokat")
b = Fnk("Kütahya","Ankara","Tokat", y="...")
print(a, b, sep="\n")

def fonk(ad="Hasan", syd="TEMURTAŞ"):
    print(ad, syd)
fonk()
fonk("Ahmet")
fonk("Serdar", "ÖZYÖN")
fonk(syd="ÖZYÖN", ad="Serdar")
fonk(syd="TATLISES")

def fonk(isim, adres="Kütahya"):
    print(isim, "-", adres)
fonk("Hasan")
fonk("Recep", "Ankara")
fonk("Ahmet", "Konya")
fonk(adres="Konya", isim="Ahmet")

def func(a, b=5, c=10):
    print(f"a :{a:5}, b :{b:5}, c :{c:5}")
func(3, 7)
func(25, c=24)
func(c=50, a=100)

def Selamla(isim = "İsimsiz"):
    print("Merhaba", isim)
Selamla()
Selamla("Ahmet")

def Func(x):
    x = x + "5"
    x = 3 * x
    return x
a = Func("Hasan")
print(f"{a} {type(a)}\n")

def Func(x, y, z):
    pass
a = Func
b = a(5, 7, 9)
print(f"{a}\n{type(a)}")
print(f"{id(a):#X}")
print(f"\n{b}\n{type(b)}")

def Func(a, b, c=100, d=75):
    print(a, b, c, d)
Func(d = 99, b = 45, a = 39)
Func(27, 100, 350)
Func(43, 125)

def Func1(a, b, *c):
    print(f"a : {a}\nb : {b}\nc : {c}\n")
def Func2(a, *b, c):
    print(f"a : {a}\nb : {b}\nc : {c}\n")
Func1(24, 56, 89, 43, 18, 29)
Func2(24, 56, 89, 43, 18, c=29)

def fonk1():
    x = 21 # Local Değişken
    print(f"x : {x}")
def fonk2():
    global x
    x = 100
    # x = x + 5
    print(f"x : {x}")
x = 45 # Global Değişken
print(f"x : {x}")
fonk1()
print(f"x : {x}")
fonk2()
print(f"x : {x}")

def Fonk1():
    a = 100
    print(a)
def Fonk2():
    global a
    a = 200
    print(a)
def Fonk3(a):
    a = 300
    print(a)
a = 43
print(a)
Fonk1()
print(a)
Fonk2()
print(a)
Fonk3(a)
print(a)

def Func(islem):
    def toplama(*a):
        toplam = 0
        for x in a:
            toplam += x
        return toplam
    def çarpma(*a):
        çarpım = 1
        for x in a:
            çarpım *= x
        return çarpım
    if islem == 0:
        return toplama
    else:
        return çarpma
Func0 = Func(0)
Func1 = Func(1)
a = Func0(7,3,5,9,2)
b = Func1(7,3,5,9,2)
print(f"Toplam: {a}\nÇarpım: {b}")

def Func(*a):
    def Topla(b):
        x = 0
        for i in b:
            x += i
        return x
    print(a)
    toplam = Topla(a)
    print(toplam)
Func(13,64,72,45,29,43)

def Func(s,*a):
    print(s)
    print(a)
    print(type(a))
    for x in a:
        print(x)
Func("Sayılar", 23, 75, 43, 19, 28, 52)

def Func(**a):
    print(a)
    for i, j in a.items():
        print(f"{i:>7}: {j}")
Func(ad="Hasan", soyad="Temurtaş", notu=100)

def Func(*a, **b):
    print(a, b, sep="\n")
Func("bir", "iki", x = "üç", y = "dört", z = "Beş")

def Func(x, *a, **b):
    print(x)
    print(9*"-")
    print(a)
    for i in a:
        print(i)
    print(9*"-")
    print(b)
    for i in b.keys():
        print(i, ":", b[i])
    print()
    for i, j in b.items():
        print(i, ":", j)
Func("Ahmet", "Hasan", "Recep", a="Sinan", b="Murat", c="Ali")

def Func1(ad):
    print("Merhaba", ad)
print(Func1)
Func1("Hasan")
Func2 = Func1
print(Func2)
Func2("Recep")
del Func1
Func2("Ahmet")
try:
    Func1("Sinan")
except NameError:
    print("İsim Hatası")

def Fibonacci(n):
    a = [0, 1]
    for i in range(2, n):
        x = a[i-2] + a[i-1]
        a.append(x)
    return a
b = Fibonacci(15)
for i in range(len(b)):
    print(f"{i+1:3} --> {b[i]:5}")

def Faktoriyel1(n):
    fakt = 1
    for i in range(2, n+1):
        fakt *= i
    return fakt
def Faktoriyel2(n):
    if n < 2:
        return 1
    else:
        return n*Faktoriyel2(n-1)
n = 10
a = Faktoriyel1(n)
b = Faktoriyel2(n)
print(f"a = {a}\nb = {b}")

def Func(n):
  if n > 0:
    x = n + Func(n-1)
    print(x)
  else:
    x = 0
  return x
print("Recursion Function")
Func(15)

def yazEkran(name, age=35):
   print("Name :", name)
   print(" Age :", age)
yazEkran(age=50, name="Hasan")
print(12*"-")
yazEkran(name="Sedat")

def hipoHesap(a, b):
    return (a**2 + b**2)**0.5
print("Hipotenüs :", hipoHesap(3, 4))
fnk = hipoHesap
print("Hipotenüs :", fnk(5, 12))

Func = lambda x, y: x*y
a = [7, 3, 8, 5, 4]
b = [6, 2, 9, 3, 7]
c = map(Func, a, b)
d = list(c)
print(a, b, c, d, sep="\n")

Func = lambda x: x % 2 == 1
a = filter(Func, range(1,21))
b = list(a)
print(a, b, sep="\n")

def herhangi(a):
    for i in a:
        if i:
            return True
    return False
def hepsi(a):
    for i in a:
        if not i:
            return False
    return True
a = [True,False,True,True,False]
b = herhangi(a)
c = hepsi(a)
print(a, b, c, sep="\n")

def EkleSehir(x):
    print(x)
    if x in a:
        a[x] += 1
    else:
        a[x] = 1
a = dict()
print(a, type(a), len(a), sep="\n")
EkleSehir("Ankara")
EkleSehir("Kütahya")
EkleSehir("Afyon")
EkleSehir("Kütahya")
EkleSehir("Ankara")
EkleSehir("Kütahya")
EkleSehir("Afyon")
EkleSehir("Kütahya")
EkleSehir("Ankara")
print(a, type(a), len(a), sep="\n")

def gunSaat(gun):
    return gun * 24
def gunDakika(gun):
    return gunSaat(gun) * 60
def gunSaniye(gun):
    return gunDakika(gun) * 60
x = 15
print(x, "Gün")
print(gunSaat(x), "Saat")
print(gunDakika(x), "Dakika")
print(gunSaniye(x), "Saniye")
print(15*"-")
Func1 = {
    "gunSt": gunSaat,
    "gunDk": gunDakika,
    "gunSn": gunSaniye
}
print(x, "Gün")
print(Func1["gunSt"](x), "Saat")
print(Func1["gunDk"](x), "Dakika")
print(Func1["gunSn"](x), "Saniye")
print(15*"-")
Func2 = {
    "gunSt": lambda gun: gun * 24,
    "gunDk": lambda gun: gun * 24 * 60,
    "gunSn": lambda gun: gun * 24 * 3600
}
print(x, "Gün")
print(Func2["gunSt"](x), "Saat")
print(Func2["gunDk"](x), "Dakika")
print(Func2["gunSn"](x), "Saniye")
print(15*"-")
for fnk in Func1:
    print(Func1[fnk](x))
print(15*"-")
for fnk in Func2:
    print(Func2[fnk](x))

def tersCevir1(x):
    y = 0
    while x > 0:
        y = 10 * y + x % 10
        x = x // 10
    return y
def tersCevir2(x):
    y = str(x)
    return int(y[::-1])
a = 512837
b = tersCevir1(a)
print(a, b, sep='\n')
b = tersCevir2(a)
print(a, b, sep='\n')

def gcdFunc(num1, num2):
    Min = num1 if num1 < num2 else num2
    num3 = 1
    for i in range(1, Min + 1):
        if num1 % i == 0 and num2 % i == 0:
            num3 = i
    return num3
print(gcdFunc(36, 24))

"""Bu bir ana programdır.
Kodlar daha sonra yazılacaktır.
Hasan TEMURTAŞ"""
def MyFunc():
    '''Bu bir altprogramdır.
Kodlar daha sonra yazılacaktır.
Hasan TEMURTAŞ'''
    pass
print(__name__)
print(__doc__)
print(30*"-")
print(MyFunc.__name__)
print(MyFunc.__doc__)

a = []
print(a)
a = 3*[4*[0]]
print(a)
a[0][0] = 7
print(a)
a[2][3] = 9
print(a)
a.clear()
print(a)

m, n = 3, 5
a = m*[n*[0]]
print(a)
a[0][0] = 15
print(a, end="\n\n")
b = [n*[0] for i in range(m)]
print(b)
b[0][0] = 15
print(b, end="\n\n")
c = [[0 for j in range(n)] for i in range(m)]
print(c)
c[0][0] = 15
print(c, end="\n\n")

n = 5
a = list()
for i in range(n):
    for j in range(i+1, n):
        t = i+1, j+1
        a.append(t)
print(a)
for i in a:
    print(i)

def func1(k):
    if k > 1:
        result = k + func1(k-1)
    else:
        result = 1
    return result
def func2(k):
    if k > 0:
        result = k*(k+1)//2
    else:
        result = 0
    return result
a = func1(100)
print(a)
a = func2(100)
print(a)

import decimal
x = decimal.Decimal(26)
y = decimal.Decimal(3)
z = x / y
w = decimal.Decimal(26/3)
print(x, type(x))
print(y, type(y))
print(z, type(z), sep='\n')
print(w, type(w), sep='\n')

from functools import reduce
def topla1(x, y):
    return x + y
topla2 = lambda x, y: x + y
a = reduce(topla1, range(1,101))
b = reduce(topla2, range(1,101))
print(a, b, sep="\n")

from functools import reduce
def Func(x,y):
    if x > y:
        return x
    else:
        return y
a = [25, 43, 17, 71, 19, 45]
b = reduce(Func,a)
print(a, b, sep="\n")

def FnkCevre(r):
    """Dairenin Çevresini Hesapla"""
    return 2 * pi * r
def FnkAlan(r):
    """Dairenin Alanını Hesapla"""
    return pi * r * r
pi = 3.14159
r = 10
print("Name :", __name__)
if __name__ == "__main__":
    print("Normal Çalıştırma")
    Cevre = FnkCevre(r)
    Alan = FnkAlan(r)
    print(f"Yaricap: {r}")
    print(FnkCevre.__doc__)
    print(FnkCevre.__name__)
    print(f"Çevre: {Cevre}")
    print(FnkAlan.__doc__)
    print(FnkAlan.__name__)
    print(f"Alan: {Alan}")
else: print("Import Edildi")

class SnfKare:
    def __init__(self, kenar=1):
        self.kenar = kenar
        print("     Kenar:", kenar)
    def cevreHesap(self):
        return self.kenar * 4
    def alanHesap(self):
        return self.kenar ** 2
c = SnfKare(15)
# c = SnfKare()
print(" Kare Alan:", c.cevreHesap())
print("Kare Çevre:", c.alanHesap())

class Kesir:
    def __init__(self, pay, payda):
        self.pay = pay
        self.payda = payda
    def __str__(self):
        return '(' + str(self.pay) + '/' + str(self.payda) + ')'
    def __add__(self, other):
        Pay = self.pay*other.payda + self.payda*other.pay
        Payda = self.payda*other.payda
        return Kesir(Pay, Payda)
    def __sub__(self, other):
        Pay = self.pay * other.payda - self.payda * other.pay
        Payda = self.payda*other.payda
        return Kesir(Pay, Payda)
    def __mul__(self, other):
        Pay = self.pay*other.pay
        Payda = self.payda*other.payda
        return Kesir(Pay, Payda)
    def __truediv__(self, other): # __div__ hata veriyor
        Pay = self.pay * other.payda
        Payda = self.payda * other.pay
        return Kesir(Pay, Payda)
    def __lt__(self, other):
        return self.pay / self.payda > other.pay / other.payda
a = Kesir(1, 2)
b = Kesir(3, 4)
c = a + b
print(a, '+', b, '=', c)
c = a - b
print(a, '-', b, '=', c)
c = a * b
print(a, '*', b, '=', c)
c = a / b
print(a, '/', b, '=', c)
c = a > b
print(a, '>', b, '=', c)

class Daire:
    pi = 3.14
    n = 0
    def __init__(self, r):
        self.r = r
        Daire.n += 1
    def cevre_hesapla(self):
        return 2 * Daire.pi * self.r
    def alan_hesapla(self):
        return Daire.pi * self.r**2
    def nufus_getir(self):
        print('n :', Daire.n)
    def __str__(self):
        return "r : %d alan : %d cevre : %d " % (self.r, self.alan_hesapla(), self.cevre_hesapla())
d1 = Daire(5)
d2 = Daire(3)
d3 = Daire(7)
d1.nufus_getir()
print('d3.dict', d3.__dict__)
print(hasattr(d3, 'r'))
print('del işleminden sonra')
delattr(d3, 'r')
print(hasattr(d3, 'r'))
print("d3.dict ", d3.__dict__)
print("get : ", getattr(d2, 'r'))
print('set işleminden sonra')
setattr(d2, 'r', 45)
print("get : ", getattr(d2, 'r'))

class Kisi:
    def __init__(self, isim, yas):
        self.isim = isim
        self.yas = yas
    def listele(self):
        print('İsim :', self.isim)
        print(' yaş :', self.yas)
class Ogrenci(Kisi):
    def __init__(self, isim, yas, numara):
        Kisi.__init__(self, isim, yas)
        self.numara = numara
    def listele(self):
        Kisi.listele(self)
        print('Numara :', self.numara)
class Ogretmen(Kisi):
    def __init__(self, isim, yas, brans):
        Kisi.__init__(self, isim, yas)
        self.brans = brans
    def listele(self):
        Kisi.listele(self)
        print('Branş :', self.brans)
n1 = Kisi('Ahmet', 17)
n2 = Ogrenci('Serdar', 25, 20181315)
n3 = Ogretmen('Hasan', 51, 'Bilgisayar')
n1.listele()
n2.listele()
n3.listele()

class C1:
    def merhaba(self):
        print('Merhaba Ben C1')
class C2:
    def merhaba(self):
        print('Merhaba Ben C2')
    def fonk1(self):
        print("Ben C2'nin Metoduyum")
# önce hangi sınıf miras alındı ise o metot çalışır.
class CC(C1, C2):
    pass
nesne = CC()
nesne.fonk1()
nesne.merhaba()

import random
class Coin:
    def __init__(self):
        self.__sideup = 'Heads'
    def toss(self):
        if random.randint(0,1) == 0:
            self.__sideup = 'Heads'
        else:
            self.__sideup = 'Tail'
    def get_sideup(self):
        return(self.__sideup)
def main():
    wins = 0
    loses = 0
    for i in range(1000):
        balance = 1000
        c1 = Coin()
        c2 = Coin()
        c3 = Coin()
        while balance > 0 and balance < 5000:
            balance = balance-100
            c1.toss()
            c2.toss()
            c3.toss()
            if c1.get_sideup() == c2.get_sideup() and c2.get_sideup() == c3.get_sideup():
                balance += 1000
        if balance >= 5000:
            wins += 1
        else:
            loses += 1
    print("wins: ", wins, " loses: ", loses)
main()

CLASS_NAMES = open("coco_labels.txt").read().strip().split("\n")
print(CLASS_NAMES)

import os
# os.mkdir("Klasor")
# os.rmdir("Klasor")
if os.path.exists("dosya.txt"):
  os.remove("dosya.txt")
else:
  print("Dosya Yok")

import os
p = "c:/temp/file.txt"
a = os.path.split(p)
b = os.path.basename(p)
c = os.path.dirname(p)
print(p,a,b,c,sep="\n")

p = os.path.join("c:\\", "temp", "file.txt")
p = 'c:/temp/file.txt'
a = os.path.exists(p)
b = os.path.isfile(p)
c = os.path.isdir(p)
print(p,a,b,c,sep="\n")
if os.path.isfile(p):
    print(os.path.getsize(p))

a = os.getcwd()
print(a)
os.chdir("..")
a = os.getcwd()
print(a)
os.mkdir("c:/temp/newdir")
os.remove("c:/temp/deleteme.txt")
os.rmdir("c:/temp/newdir")
os.rename("c:/temp/file.txt", "c:/temp/newname.txt")

import os
a = os.getcwd()
print(a, type(a))
a = "D:/2018/dosya.txt"
print(a, type(a))
a = "D:\\2018\\dosya.txt"
print(a, type(a))
b = os.path.dirname(a)
c = os.path.basename(a)
d = os.path.split(a)
print(b, c, d, sep="\n")

x.strip()

a = list()
for path, subdirs, files in os.walk(root):
    a.append([path, subdirs, files])
a

b = list()
for path, subdirs, files in os.walk(root):
    b.append([path, files])
b

b = [os.path.join(path, name) for path, subdirs, files in os.walk(root) for name in files]
b

c = os.listdir("../Data/valid/adenocarcinoma")

a = list()
root = os.path.abspath("../Dataset")
for path, subdirs, files in os.walk(root):
    for name in files:
        a.append(os.path.join(path, name))

import os
# a = "D:/2022/dosya.txt"
# a = "D:\\2022\\dosya.txt"
a = os.getcwd()
print(a)
b = os.path.dirname(a)
c = os.path.basename(a)
d = os.path.split(a)
print(b, c, d, sep="\n")

a = 'E:\\2020\\dosya.txt'
# a = 'E:/2020/dosya.txt'
b = str(a)
c = repr(a)
print('a = {0:<24}{1} {2}'.format(a, type(a), len(a)))
print('b = {0:<24}{1} {2}'.format(b, type(b), len(b)))
print('c = {0:<24}{1} {2}'.format(c, type(c), len(c)))

tic = time.time()
time.sleep(5)
toc = time.time()
print(f" Tic : {tic}")
print(f" Toc : {toc}")
print(f"Süre : {1000*(toc-tic)} ms")

a = time.time()
b = time.localtime(a)
c = time.asctime(b)
print(f"{a}\n{type(a)}\n")
print(f"{b}\n{type(b)}\n")
print(f"{c}\n{type(c)}\n")
print(f"{b.tm_year}\n{b.tm_hour}\n{b.tm_sec}")

import time
n = 1000000
tic = time.time()
toplam = 0
for i in range(1,n+1):
    toplam += i
toc = time.time()
print(f"Toplam : {toplam}")
print(f"  Süre : {1000*(toc-tic)} ms")
tic = time.time()
toplam = sum(range(1,n+1))
toc = time.time()
print(f"Toplam : {toplam}")
print(f"  Süre : {1000*(toc-tic)} ms")

import time, timeit
n = 1000000
tic = time.time()
toplam = sum(range(1,n+1))
toc = time.time()
print(f"Toplam : {toplam}")
print(f"  Süre : {1000*(toc-tic)} ms")
tic = timeit.default_timer()
toplam = sum(range(1,n+1))
toc = timeit.default_timer()
print(f"Toplam : {toplam}")
print(f"  Süre : {1000*(toc-tic)} ms")

import datetime
# x = datetime.datetime(2000, 1, 17, 2, 45, 24)
x = datetime.datetime(2000, 1, 17)
print(x, x.year, x.hour, "", sep="\n")
print(x.strftime("%A"), x.strftime("%B"), "", sep="\n")
print(x.strftime("%a"), x.strftime("%b"), "", sep="\n")

import datetime
x = datetime.datetime.now()
print(x)
print(x.strftime("%x"))
print(x.strftime("%X"))
print(x.strftime("%f"))

import datetime
t1 = datetime.date.today()
t2 = t1 + datetime.timedelta(25)
print(t1, type(t1))
print(t2, type(t2))

import random
random.seed(15)
for n in range(20):
    x = 100*random.random()
    print(f"{n+1:2}.Sayı : {x:15.12}{id(x):#16X}")

import random
for n in range(0, 20):
    x = random.randrange(50,61)
    print(f"{n+1:2}.Sayı : {x:2}{id(x):#16X}")

import random
a = [13, 47, 25, 43, 63]
print(a)
z = random.shuffle(a)
print(z)
print(a)
random.shuffle(a)
print(a)

import random
a = list(range(10))
print(a)
random.shuffle(a)
print(a)

import random
a = random.randint(1, 6)
print(a)
# random.seed(0)
a = random.uniform(1, 6)
print(a)
# random.seed(0)
a = 1 + 5*random.random()
print(a)

import math
a = 26/3
b = math.pi
c = math.e
print(a, b, c, sep="\n")

import math
a = math.e
b = math.exp(1)
c = math.exp(5)
d = math.pi
e = math.sqrt(5)
print(a, b, c, d, e, sep="\n")

import math
a = math.pi
s = 30*'-'
x, y = 1, math.sqrt(3)
qr = math.atan2(y, x)
qd = math.degrees(qr)
help(math.cos)
print(s, type(math.cos), s, sep='\n')
print(a, type(a), s, sep='\n')
print(qr, qd, sep='\n')

import math
# a = math.pi
a = math.e
b = math.trunc(a)
c = int(a)
print(f"a = {a:<20}{type(a)}")
print(f"b = {b:<20}{type(b)}")
print(f"c = {c:<20}{type(c)}")

import math
a = math.exp(7)
b = str(a)
c = format(a, '.9f')
d = format(a, '.9g')
print(f"a = {a:<20}{type(a)}")
print(f"b = {b:<20}{type(b)}")
print(f"c = {c:<20}{type(c)}")
print(f"d = {d:<20}{type(d)}")

import math
a = math.exp(7)
b = round(a)
c = round(a, 0)
d = round(a, 8)
print(f"a = {a:<20}{type(a)}")
print(f"b = {b:<20}{type(b)}")
print(f"c = {c:<20}{type(c)}")
print(f"d = {d:<20}{type(d)}")

import math
r = 10
q = math.pi/4
x = r*math.cos(q)
y = r*math.sin(q)
q1 = math.atan2(y, x)
q2 = math.atan(y/x)
print(r, x, y, q, q1, q2, sep="\n")
x, y = -x, -y
q3 = math.atan2(y, x)
q4 = math.atan(y/x)
q3d = math.degrees(q3)
q4d = math.degrees(q4)
print('', q3, q3d, q4, q4d, sep="\n")

import math
a = math.sqrt(375)
b = math.hypot(5, 12)
c = math.pi/3
d = math.radians(60)
e = math.degrees(d)
f = round(e, 6)
print(a, b, c, d, e, f, sep="\n")

import math
x, y, z = 3, 4, 12
d1 = (x**2 + y**2 + z**2)**0.5
d2 = math.hypot(x, y, z)
d3 = math.dist([2, 5, 3], [5, 9, 15])
print(d1, type(d1))
print(d2, type(d2))
print(d3, type(d3))

from math import hypot, dist
# from math import *
x, y, z = 3, 4, 12
d1 = (x**2 + y**2 + z**2)**0.5
d2 = hypot(x, y, z)
d3 = dist([2, 5, 3], [5, 9, 15])
print(d1, type(d1))
print(d2, type(d2))
print(d3, type(d3))

import math
x = 35
# x = -35
a = x / 4
print(a, type(a))
a = math.floor(x / 4)
print(a, type(a))
a = x // 4
print(a, type(a))
a = x % 4
print(a, type(a))

import math
# a = math.pi
# a = math.e
a = math.exp(7)
print("a:", a, type(a))
b = str(a)
print("b:", b, type(b))
c = repr(a)
print("c:", c, type(c))
d = format(a, '.9f')
print("d:", d, type(d))
e = format(a, '.9g')
print("e:", e, type(e))
f = round(a, 8)
print("f:", f, type(f))
g = round(a, 0)
print("g:", g, type(g))
h = round(g, 8)
print("h:", h, type(h))
k = round(a)
print("k:", k, type(k))
m = round(k, 8)
print("m:", m, type(m))

import math
a = math.e
b = math.exp(1)
c = math.exp(5)
d = math.pi
e = math.sqrt(5)
print(a, b, c, d, e, sep="\n")

import math
r = 10
q = math.pi/6
x = r*math.cos(q)
y = r*math.sin(q)
q2 = math.atan2(y, x)
q3 = math.atan(y/x)
print(r,q,x,y,q2,q3,sep="\n")
x = -x
y = -y
q2 = math.atan2(y, x)
q3 = math.atan(y/x)
q2d = math.degrees(q2)
q3d = math.degrees(q3)
print("",q2,q2d,"",q3,q3d,sep="\n")

import math
a = math.sqrt(375)
b = math.hypot(5, 12)
c = math.pi/3
d = math.radians(60)
e = math.degrees(d)
f = round(e, 6)
print(a, b, c, d, e, f, sep="\n")

from math import *
a = sqrt(375)
b = hypot(5, 12)
c = pi/3
d = radians(60)
e = degrees(d)
f = round(e, 6)
print(a, b, c, d, e, f, sep="\n")

import math
a = 7.8
b = math.trunc(a)
print(a, b, type(b))

from math import sqrt, sin, cos, pi
x = sqrt(45)
print(x)
print(pi)
print(sin(pi/3))
print(cos(pi/3))

x = "7.8345"
y = float(x)
a = isinstance(x,str)
b = isinstance(x,float)
c = isinstance(y,str)
d = isinstance(y,float)
e = type(x) == str
f = type(x) == float
g = type(y) == str
h = type(y) == float
s = f"a : {a}\nb : {b}\nc : {c}\nd : {d}\n\n" + \
    f"e : {e}\nf : {f}\ng : {g}\nh : {h}\n"
print(s)


