f = open("Dosya.txt", "a+", encoding="utf8")
# print(f)
# print(f.__class__)
# print(type(f))
print(f.name)
print(f.mode)
print(f.encoding)
print(f.tell())
f.write("ŞĞİÇÖÜ SGICOU\n")
print(f.tell())
f.seek(0)
print(f.tell())
a = f.read()
print("----------------------")
print(a)
print("----------------------")
print(f.tell())
print(f.closed)
f.close()
print(f.closed)

def YazDosya(s):
    f = open("Dosya.txt", "w", encoding="utf8")
    f.write(s + "\n")
    f.close()
def EkleDosya(s):
    f = open("Dosya.txt", "a", encoding="utf8")
    f.write(s + "\n")
    f.close()
def OkuDosya():
    f = open("Dosya.txt", "r", encoding="utf8")
    s = f.read()
    print("---------------")
    print(s)
    print("---------------")
    print(type(s), len(s), f.tell())
    f.close()
s = input("İsim Gir : ")
# YazDosya(s)
EkleDosya(s)
OkuDosya()

try:
    f = open("Dosya.txt", "r")
    # f = open("Dosya.txt", "r", encoding="utf8")
    s = f.read()
    f.close()
    print("------------------")
    print(s)
    print("------------------")
except FileNotFoundError:
    print('Dosya Bulunamadı')
except UnicodeDecodeError:
    print("Unicode Hatası")
else:
    print('Kod Hatasız Çalıştı')
finally:
    print('Her Durumda Çalışacak')

f = open("Dosya.txt", "r", encoding="utf8")
a = f.read()
print(a)
print(f.closed)
f.close()
print(f.closed)
print("-------------")
with open("Dosya.txt", "r", encoding="utf8") as f:
    a = f.read()
    print(a)
    print(f.closed)
print(f.closed)

with open("Dosya.txt", "r", encoding="utf8") as f:
    print(f.tell())
    s = f.read()
    print(s)
    print(f.tell())
    print("---------------")
    f.seek(0)
    print(f.tell())
    for x in f:
        print(x, end="")
    print()
    print(f.tell())

f = open("Dosya.txt", "r", encoding="utf8")
a = f.readlines()
print(a)
for x in a:
    print(x, end="")
print("\n-------------")
f.seek(0)
while True:
    x = f.readline()
    if x == "":
        break
    print(x, end="")
f.close()

f = open("Dosya.txt", "r", encoding="utf8")
s = f.read()
print(s)
print("------------")
print(f.tell())
f.seek(14)
print(f.tell())
s = f.read(10)
print(s)
print(f.tell())
f.close()

f = open("Dosya.txt", "r+", encoding="utf8")
s = f.read()
s = "Serdar\n" + s
f.seek(0)
f.write(s)
f.close()
print(s, end="")

f = open("Dosya.txt", "r+", encoding="utf8")
a = f.readlines()
print(type(a),len(a))
print(a)
a.insert(3, "Kenan\n")
print(type(a), len(a))
print(a)
f.seek(0)
f.writelines(a)
f.close()

try:
    f = open("Dosya.txt", "r", encoding="utf8")
    s = f.read()
    print(s, end="")
    f.close()
except FileNotFoundError as e:
    print(e)
    print(e.args)
    print(e.errno)
    print(e.strerror)
    print(e.filename)

f = open("Dosya.txt", "r", encoding="utf8")
a = f.read(10)
f.seek(11)
b = f.read(15)
f.close()
print(a)
print("------------")
print(b)

f = open("Dosya.txt", "r", encoding="utf8")
a = f.read()
print(a, end="")
print("------------")
words = a.split()
for word in words:
    print(word)
f.close()

f = open("Dosya.txt", "w+", encoding="utf8")
print("Hasan", file=f)
print("Ahmet", file=f)
print("Kenan", file=f)
print("Recep", file=f)
f.seek(0)
a = f.read()
print(a, end="")
f.close()

import sys
temp1 = sys.stdout
sys.stdout = open("Dosya.txt", "w", encoding="utf8")
temp2 = sys.stdout
print("Ahmet")
print("Kenan")
print("Recep")
sys.stdout.close()
sys.stdout = temp1
print(temp1, temp2, sep="\n")

f = open("Dosya.txt", "wb+")
s = b"0123456789 Hasan Temurtas"
print(type(s), len(s))
print(s)
a = f.write(s)
print(a)
f.seek(5)
a = f.read(3)
print(a)
f.seek(-14, 2)
a = f.read(5)
print(a)
f.close()

f = open("Dosya.txt", "rb")
a = f.read()
print(a)
f.seek(0)
while True:
    a = f.read(1)
    if a == b:
        break
    print(a)
f.close()

try:
    f = open("Dosya.txt", "r", encoding="utf8")
    s1 = f.read()
    f.close()
    print("Metin\n-----------")
    print("%s" % s1)
    print("-----------")
    a = s1.split()
    if len(a) > 0:
        s2 = "\n".join(a)
        print(f"{s2}")
        f = open("Dosya2.txt", "w", encoding="utf8")
        f.write(s2)
        f.close()
    else:
        print("Dosyaya Metin Girilmemiş")
except:
    print("Bu İsimde Bir Dosya Yoktur")

def exor(x, y):
    z = x and not y or not x and y
    return z
def exnor(x, y):
    z = x and y or not(x or y)
    return z
print(f"{'a':>3}{'b':>8}{'exor':>9}{'exnor':>9}")
print(30*'-')
a = b = False
print(f"{a}\t{b}\t{exor(a,b)}\t{exnor(a,b)}")
b = True
print(f"{a}\t{b}\t{exor(a,b)}\t{exnor(a,b)}")
a, b = True, False
print(f"{a}\t{b}\t{exor(a,b)}\t{exnor(a,b)}")
b = True
print(f"{a}\t{b}\t{exor(a,b)}\t{exnor(a,b)}")

def NotHesap():
    print("Öğrencinin Not Hesabı")
    try:
        Ödev = int(input(" Ödev Notu : "))
        Vize = int(input(" Vize Notu : "))
        Final = int(input("Final Notu : "))
        Not = 0.2*Ödev + 0.3*Vize + 0.5*Final
        print(" Harf Notu : ", end="")
        if Not >= 90: print(f"{Not}, AA")
        elif Not >= 85: print(f"{Not}, BA")
        elif Not >= 80: print(f"{Not}, BB")
        elif Not >= 75: print(f"{Not}, CB")
        elif Not >= 70: print(f"{Not}, CC")
        elif Not >= 60: print(f"{Not}, DC")
        elif Not >= 50: print(f"{Not}, DD")
        elif Not >= 40: print(f"{Not}, FD")
        else: print(f"{Not}, FF")
    except ValueError:
        print("Notlar Tamsayı Olmalı")
NotHesap()

import time
def Yaz1Ekran(s, t):
    print("For Döngüsü")
    for i in range(1, 51):
        if i == 16: break
        if i in [4, 7, 9, 12, 13]: continue
        print(f"{i:5}{s:>27}")
        time.sleep(t)
def Yaz2Ekran(s, t):
    print("While Döngüsü")
    i = 0
    while i < 50:
        i += 1
        if i == 16: break
        if i in [4, 7, 9, 12, 13]: continue
        print(f"{i:5}{s:>27}")
        time.sleep(t)
t = 0.5
s = "Python Programlama Dersi"
Yaz1Ekran(s, t)
Yaz2Ekran(s, t)

import random
n, x = 0, random.randint(1, 1000)
while True:
    try:
        n += 1
        if n > 10:
            print("Kaybettiniz")
            break
        y = int(input(f"{n}.Tahmin : "))
        if y == x:
            print("Kazandınız")
            break
        elif y > x:
            print("Sayı Daha Küçük Olmalı")
        else: print("Sayı Daha Büyük Olmalı")
    except ValueError:
        n -= 1
        print("Sayı Tamsayı Olmalı")

def IsFloat(x):
    try:
        float(x)
    except ValueError:
        return False
    return True
def ReadFloat(Title):
    while True:
        x = input(Title + " : ")
        if IsFloat(x):
            y = float(x)
            if y > 0: return y
            else: print(Title + " 0'dan Büyük Olmalı")
        else: print(Title + " Reel Sayı olmalı")
print("Üçgenin Alan Hesanı")
while True:
    a = ReadFloat("1.Kenar")
    b = ReadFloat("2.Kenar")
    c = ReadFloat("3.Kenar")
    if abs(a-b) < c < a+b:
        u = (a + b + c) / 2
        alan = pow(u*(u-a)*(u-b)*(u-c), 0.5)
        print("Kenar Değerleri :", (a, b, c))
        print("Üçkenin Alanı :", alan)
        break
    else: print("Böyle Bir Üçken Yok")

import time
def AsalMı(x): # Asal Sayı ise True
    if x < 2: return False
    k = 2
    while k <= x / 2:
        if x % k == 0: return False
        k += 1
    return True
def EmirpSayılar(N):
    a = list()
    i, n = 10, 0
    while True:
        if AsalMı(i):
            j, k = 0, i
            while k > 0:
                j = 10*j + k%10
                k = k // 10
            if i != j:
                if AsalMı(j):
                    a.append(i)
                    n += 1
                    if n == N: return a
        i += 1
tic = time.time()
a = EmirpSayılar(100)
toc = time.time()
print("Emirp Sayılar")
for i in range(len(a)):
    print(f"{i+1:5}.Sayı : {a[i]}")
print(f"Toplam Süre : {1000*(toc-tic)} ms")

def OkuAd():
    while True:
        ad = input("   Adınız: ")
        ad = ad.strip()
        if len(ad) > 0:
            break
    lst = ad.split()
    for i in range(len(lst)):
        lst[i] = lst[i].capitalize()
    ad = " ".join(lst)
    return ad
def OkuSyd():
    while True:
        syd = input("Soyadınız: ")
        syd = syd.strip()
        if len(syd) > 0:
            break
    lst = syd.split()
    syd = lst[0].upper()
    return syd
s = OkuAd() + " " + OkuSyd()
print(s)

def YazBaşlık():
    print("Kürenin Yüzey Alanı ve Hacim Hesabı")
    print(f"Pi Sayısı {math.pi} alınacak\n")
def GirYarçap():
    while True:
        try:
            r = float(input("Yarıçap Gir : "))
            if r > 0: return r
            else: print("Yarıçap > 0 Olmalı\n")
        except ValueError:
            print("Yarıçap Reel Sayı Olmalı\n")
def HesaplaYüzeyAlanı(r):
    return 4 * math.pi * math.pow(r, 2)
def HesaplaHacim(r):
    return HesaplaYüzeyAlanı(r) * r / 3
def YazSonuç(r, alan, hacim):
    print(f"    Yarıçap : {r} Birim")
    print(f"Yüzey Alanı : {alan} Birim^2")
    print(f"      Hacim : {hacim} Birim^3")
import math
YazBaşlık()
r = GirYarçap()
alan = HesaplaYüzeyAlanı(r)
hacim = HesaplaHacim(r)
YazSonuç(r, alan, hacim)

def YapDizi(n):
    a = list()
    for i in range(n):
        a.append(100*random.random())
    return a
def TopOrtStd(a):
    n, toplam, sapma = len(a), sum(a), 0
    ortalama = toplam / n
    for i in range(n):
        sapma += (a[i]-ortalama)**2
    sapma = (sapma/n)**0.5
    return toplam, ortalama, sapma
def YazSonuçlar(a, toplam, ortalama, sapma):
    print("Toplam, Ortalama, Standart Sapma Hesabı")
    for i in range(len(a)):
        print(f"{i+1:9}.Sayı :{a[i]:12.6f}")
    print(f"\n        Toplam :{toplam:12.6f}")
    print(f"      Ortalama :{ortalama:12.6f}")
    print(f"Standart Sapma :{sapma:12.6f}")
import random
a = YapDizi(15)
YazSonuçlar(a, *TopOrtStd(a))

def GirKatsayı(s):
    while True:
        try:
            return float(input(s + " : "))
        except ValueError:
            print(s, "Reel Sayı Olmalı")
def KökHesap():
    print("2.Dereceden Denklem Köklerinin Hesabı")
    a = GirKatsayı("A Katsayısı")
    b = GirKatsayı("B Katsayısı")
    c = GirKatsayı("C Katsayısı")
    delta = b * b - 4 * a * c
    if delta < 0: print("\nKökler Sanal")
    elif delta > 0: print("\nKökler Reel")
    else: print("\nKökler Katlı")
    x1 = (-b - delta ** 0.5) / (2 * a)
    x2 = (-b + delta ** 0.5) / (2 * a)
    print(f"x1 = {x1}\nx2 = {x2}")
KökHesap()

def OkuTopN():
    while True:
        try:
            TopN = int(input("Top Sayısı : "))
            if 0 < TopN < 21: return TopN
            else: print("0 < Top Sayısı < 21 Olmalı\n")
        except ValueError:
            print("Geçerli Bir Tamsayı Giriniz\n")
def TopÇekilişi(TopN):
    a = TopN*[0]
    N = 1000*TopN
    for n in range(N):
        k = random.randint(0, TopN-1)
        a[k] += 1
    print(f"\nÇekiliş Sayısı : {N}")
    print("   Gelen      Frekans")
    for k in range(TopN):
        print(f"{k+1:8} {a[k]:12}")
import random
print("Top Çekilişi Programı\n")
TopN = OkuTopN()
TopÇekilişi(TopN)

def OkuKolonN():
    while True:
        try:
            KolonN = int(input("Kolon Sayısı : "))
            if 0 < KolonN < 21: return KolonN
            else: print("0 < Kolon Sayısı < 21 Olmalı\n")
        except ValueError:
            print("Geçerli Bir Tamsayı Giriniz\n")
def OynaSayisalLoto(KolonN):
    print("\nTahminler")
    for k in range(KolonN):
        # a = random.sample(range(1, 49), 6)
        a = list()
        while len(a) < 6:
            x = random.randint(1, 49)
            if x not in a: a.append(x)
        a.sort()
        print(f"{k+1:3}.kolon : ", end="")
        for i in range(0, 6):
            print(f"{a[i]:3}", end="")
        print()
import random
print("Sayısal Loto\n")
KolonN = OkuKolonN()
OynaSayisalLoto(KolonN)

def MakeList(n):
    a = [random.randint(100, 999) for i in range(n)]
    return a
def WriteList(a):
    print("Dizi Elemanlari")
    for i in range(len(a)):
        print(f"{i+1:4}.Eleman :{a[i]:5}")
def MinMaxIndexes(a):
    iMin = iMax = 0
    for i in range(1, len(a)):
        if a[i] < a[iMin]: iMin = i
        if a[i] > a[iMax]: iMax = i
    return iMin, iMax
import random
a = MakeList(15)
WriteList(a)
iMin, iMax = MinMaxIndexes(a)
print("En Küçük Eleman")
print(f"{iMin+1:4}.Eleman :{a[iMin]:5}")
print("En Büyük Eleman")
print(f"{iMax+1:4}.Eleman :{a[iMax]:5}")

def MakeMatrix(m, n):
    if m < 1 or n < 1: return list()
    a = [n*[0] for i in range(m)]
    for i in range(m):
        for j in range(n):
            a[i][j] = 10*random.random() - 5
    return a
def WriteMatrixScreen(a):
    if len(a) < 1: return
    for i in range(len(a)):
        for j in range(len(a[i])):
            print(f"{a[i][j]:15.6f}", end="")
        print()
def MulMatrix(a, b):
    m, n, p = len(a), len(b[0]), len(b)
    if m < 1 or n < 1 or p < 1: return list()
    c = [[0] * n for i in range(m)]
    for i in range(m):
        for j in range(n):
            for k in range(p):
                c[i][j] += a[i][k] * b[k][j]
    return c
import random
m, n, p = 5, 4, 3
a = MakeMatrix(m, p)
b = MakeMatrix(p, n)
c = MulMatrix(a, b)
print(f"{m}*{p}'lik A Matrisi")
WriteMatrixScreen(a)
print(f"{p}*{n}'lik B Matrisi")
WriteMatrixScreen(b)
print(f"{m}*{n}'lik C = A*B Matrisi")
WriteMatrixScreen(c)

def MakeMatrix(m, n):
    if m < 1 or n < 1: return list()
    a = [n*[0] for i in range(m)]
    for i in range(m):
        for j in range(n):
            a[i][j] = 100*random.random() - 50
    return a
def WriteMatrixScreen(a):
    m = len(a)
    if m < 1:
        print("Matris Ekrana Yazdırılamadı")
        return
    n = len(a[0])
    print(f"{m:12}{n:12}")
    for i in range(m):
        for j in range(n):
            print(f"{a[i][j]:12.6f}", end="")
        print()
    print("Matris Ekrana Yazdırıldı")
def WriteMatrixFile(a,s):
    m = len(a)
    if m < 1:
        print("Matris Dosyaya Yazdırılamadı")
        return
    n = len(a[0])
    f = open(s, "w", encoding="utf8")
    f.write(f"{m:12}{n:12}\n")
    for i in range(m):
        for j in range(n):
            f.write(f"{a[i][j]:12.6f}")
        f.write("\n")
    f.close()
    print("Matris Dosyaya Yazdırıldı")
import random
m = random.randint(8,15)
n = random.randint(3,8)
a = MakeMatrix(m,n)
WriteMatrixScreen(a)
WriteMatrixFile(a,"Dosya.txt")

def ReadMatrixFile(s):
    try:
        f = open(s, "r", encoding="utf8")
        x = f.readline().split()
        m = int(x[0])
        n = int(x[1])
        a = [[0] * n for i in range(m)]
        for i in range(m):
            x = f.readline().split()
            for j in range(n):
                a[i][j] = float(x[j])
        f.close()
        print("Matris Dosyadan Okundu")
    except:
        a = list()
        print("Matris Dosyadan Okunamadı")
    return a
def WriteMatrixScreen(a):
    m = len(a)
    if m < 1:
        print("Matris Ekrana Yazdırılamadı")
        return
    n = len(a[0])
    print(f"{m:12}{n:12}")
    for i in range(m):
        for j in range(n):
            print(f"{a[i][j]:12.6f}", end="")
        print()
    print("Matris Ekrana Yazdırıldı")
a = ReadMatrixFile("Dosya.txt")
WriteMatrixScreen(a)

def MakeList(n):
    a = [random.randint(100, 999) for i in range(n)]
    return a
def WriteList(a):
    print("Dizi Elemanlari")
    for i in range(len(a)):
        print(f"{i+1:4}.Eleman :{a[i]:5}")
def ReadValue():
    while True:
        try: return int(input("Tamsayi : "))
        except ValueError: print("Geçerli Bir Tamsayi Giriniz\n")
def LinearSearch(a, x):
    for i in range(len(a)):
        if a[i] == x: return i
    return -1
def BinarySearch(a, x):
    bas, son = 0, len(a) - 1
    while bas <= son:
        i = (bas + son) // 2
        if a[i] == x: return i
        elif a[i] < x: bas = i + 1
        else: son = i - 1
    return -1
import random
a = MakeList(15)
WriteList(a)
x = ReadValue()
i = LinearSearch(a, x)
print("Doğrusal Arama Algoritması")
if i >= 0: print(f"{x:5} : Dizinin {i+1}.elemanı")
else: print(f"{x:5} : Dizi elemanı değil")
a.sort()
print()
WriteList(a)
i = BinarySearch(a, x)
print("İkili Arama Algoritması")
if i >= 0: print(f"{x:5} : Dizinin {i+1}.elemanı")
else: print(f"{x:5} : Dizi elemanı değil")

def MakeList(n):
    a = [random.randint(100, 999) for i in range(n)]
    return a
def WriteLists(a, b, c, d):
    print("  Dizi    Artan    Artan     Azalan")
    print("-----------------------------------")
    for i in range(len(a)):
        print(f"{a[i]:5} {b[i]:8} {c[i]:8} {d[i]:9}")
def BubbleSort(a): # Kabarcık Sıralama Algoritması
    j = n = len(a)
    while j > 0:
        j = 0
        for i in range(n-1):
            if a[i] > a[i+1]:
                a[i], a[i+1] = a[i+1], a[i]
                j += 1
def SelectionSort(a): # Seçmeli Sıralama Algoritması
    n = len(a)
    for i in range(n-1):
        k = i
        for j in range(i+1, n):
            if a[j] < a[k]: k = j
        if k > i: a[i], a[k] = a[k], a[i]
import random
a = MakeList(15)
b = a.copy()
BubbleSort(b)
c = a.copy()
SelectionSort(c)
d = c.copy()
d.reverse()
WriteLists(a, b, c, d)
print(f"Eleman Sayısı : {len(a)}")
