import matplotlib.pyplot as plt

f = 3.5
x = np.linspace(0, 1, 1001)
y = np.sin(2*np.pi*f*x)
print(f"{type(x)}\n{x.shape} {x.dtype}")
print(f"{type(y)}\n{y.shape} {y.dtype}")
plt.figure(figsize=(10, 6))
plt.plot(x, y, lw=2)
plt.title("sin(2$\pi$x)")
plt.xlabel("x ekseni")
plt.ylabel("y ekseni")
plt.grid()
# plt.savefig('resim.png',dpi=100,bbox_inches='tight')
# plt.savefig('resim.png',dpi=150)
plt.savefig('resim.jpg')
plt.savefig('resim.png')
plt.savefig('resim.pdf')
plt.show()

a, f = 0.6, 0.5
x = np.linspace(0, 5, 1001)
y = np.exp(-a*x)*np.sin(2*np.pi*f*x)
Ids = range(0, len(x), 25)
print(f"{type(x)}\n{x.shape} {x.dtype}")
print(f"{type(y)}\n{y.shape} {y.dtype}")
print(f"{type(Ids)} {len(Ids)}")
plt.figure(figsize=(10, 6))
plt.plot(x, y, "g", lw=2)
plt.plot(x[Ids], y[Ids], "mo", ms=5)
plt.title("Grafik")
plt.xlabel("x ekseni")
plt.ylabel("y ekseni")
plt.grid()
plt.show()

x1 = np.linspace(0, 5)
x2 = np.linspace(0, 2)
y1 = np.cos(2 * np.pi * x1)
y2 = np.cos(2 * np.pi * x2) * np.exp(-x2)
print(f"{type(x1)}\n{x1.shape} {x1.dtype}")
print(f"{type(y1)}\n{y1.shape} {y1.dtype}")
print(f"{type(x2)}\n{x2.shape} {x2.dtype}")
print(f"{type(y2)}\n{y2.shape} {y2.dtype}")
plt.figure(figsize=(10, 8))
plt.subplot(2, 1, 1)
plt.plot(x1, y1, 'o-')
plt.title("Subplot 1")
plt.xlabel("x ekseni")
plt.ylabel("y ekseni")
plt.subplot(2, 1, 2)
plt.plot(x2, y2, '.-')
plt.title("Subplot 2")
plt.xlabel("x ekseni")
plt.ylabel("y ekseni")
plt.show()

image = np.random.rand(15, 15)
# plt.imshow(image)
plt.imshow(image, cmap=plt.cm.cool)
plt.colorbar()
plt.show()

x = np.linspace(-5, 5)
# y = np.arctan(x)
y = 1 / (1 + np.exp(-x))
plt.plot(x, y)
plt.axis('tight')
plt.show()

rng=np.random.RandomState()
x = np.linspace(0,10,1001)
y = rng.randn(1001,6)
y = np.cumsum(y, axis=0)
plt.figure(figsize=(10, 6))
plt.plot(x,y)
plt.legend('ABCDEF',ncol=2, loc='best')
plt.show()

Yıllar = np.arange(1980, 2021)
Büyüme = np.random.randint(-10, 10, len(Yıllar))
print(type(Yıllar), Yıllar.shape, Yıllar.dtype)
print(type(Büyüme), Büyüme.shape, Büyüme.dtype)
plt.figure(figsize=(10, 6))
plt.plot(Yıllar, Büyüme)
plt.title('Büyüme Oranları')
plt.xlabel('Yıllar')
plt.ylabel('Büyüme')
plt.xticks([1980, 1990, 2000, 2010, 2020])
plt.yticks([-12, -6, 0, 6, 12],["-12%","-6%","0%","+6%","+12%"])
plt.grid()
plt.show()

x = np.linspace(-6, 6, 1001)
y = 1 / (1 + np.exp(-x))
plt.axhline(y=0, color="black", linestyle="--")
plt.axhline(y=0.5, color="black", linestyle=":")
plt.axhline(y=1.0, color="black", linestyle="--")
# plt.axhline(color="grey")
plt.axvline(color="gray")
#plt.axline((0, 0.5), slope=0.25, color="black", linestyle=(0, (5, 5)))
plt.plot(x, y, lw=2, label=r"$\sigma(t) = \frac{1}{1 + e^{-t}}$")
plt.xlim(-6, 6)
plt.xlabel("x label")
plt.legend(fontsize=14, loc="lower right")
plt.show()

x = np.linspace(-4, 4, 1001)
y = np.cosh(x)
plt.plot(x,y)
plt.show()

fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(10, 6))
print(fig, type(fig), "", sep="\n")
print(ax, type(ax), ax.shape, "", sep="\n")
print(ax[0, 0], type(ax[0, 0]), "", sep="\n")
print(ax[1, 2], type(ax[1, 2]), sep="\n")
plt.show()

fig = plt.figure(figsize=(10, 6))
ax1 = plt.subplot2grid((3,2), (0, 0), colspan=2, rowspan=2)
ax2 = plt.subplot2grid((3,2), (2, 0))
ax3 = plt.subplot2grid((3,2), (2, 1))
plt.show()

yillar = np.arange(1999,2017)
buyume = [-4, 7, -6, -5, 5.6, 9.6, 9, 7.1, 5, .8, -4.7, 8, 11, 5, 8, 5, 6, 3.5]
print(len(yillar),len(buyume))
plt.plot(yillar,buyume)
plt.title('Büyüme Oranları')
plt.xlabel('Yıllar')
plt.ylabel('Büyüme')
plt.xticks([2000, 2005, 2010, 2015])
plt.yticks([-5, 0, 5, 10],['-%5','%0','%5','%15'])
plt.show()

np.random.seed(0)
mu = 10    # mean of distribution
sigma = 15  # standard deviation of distribution
x = mu + sigma * np.random.randn(1000)
print(type(x), x.shape, sep='\n')
num_bins = 50
fig, ax = plt.subplots()
n, bins, patches = ax.hist(x, num_bins, density=True)
y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
ax.plot(bins, y, '--')
ax.set_xlabel('Smarts')
ax.set_ylabel('Probability density')
ax.set_title(r'$\mu=10$, $\sigma=15$')
fig.tight_layout()
plt.show()

t = np.linspace(-10, 10, 101)
sig = 1 / (1 + np.exp(-t))
plt.axhline(y=0, color="black", linestyle="--")
plt.axhline(y=0.5, color="black", linestyle=":")
plt.axhline(y=1.0, color="black", linestyle="--")
plt.axvline(color="grey")
#plt.axline((0, 0.5), slope=0.25, color="black", linestyle=(0, (5, 5)))
plt.plot(t, sig, linewidth=2, label=r"$\sigma(t) = \frac{1}{1 + e^{-t}}$")
plt.xlim(-10, 10)
plt.xlabel("t")
plt.legend(fontsize=14)
plt.show()

np.random.seed(0)
data = np.random.randn(2, 100)
fig, axs = plt.subplots(2, 2, figsize=(10, 6))
axs[0, 0].hist(data[0])
axs[1, 0].scatter(data[0], data[1])
axs[0, 1].plot(data[0], data[1])
axs[1, 1].hist2d(data[0], data[1])
print(fig)
print(axs)
plt.show()

t = np.arange(0.0, 2.0, 0.01)
s = 1 + np.sin(2 * np.pi * t)
fig, ax = plt.subplots()
ax.plot(t, s)
ax.set(xlabel='time (s)', ylabel='voltage (mV)',
       title='About as simple as it gets, folks')
ax.grid()
fig.savefig("test.png")
plt.show()

image = np.random.rand(30, 30)
plt.imshow(image, cmap=plt.cm.hot)
plt.colorbar()
plt.show()

from scipy import misc
img = misc.face()
print(type(img))
print(img.shape)
print(img.ndim)
print(img[:, :, 0].shape)
a = img[0:5, 0:3, 0]
print(a)
print(a/255)
print(img.dtype)
img2 = img @ [0.2126, 0.7152, 0.0722]
plt.imshow(img)
#plt.imshow(img2)
#plt.imshow(img2, cmap="gray")
plt.show()

n = np.random.randint(0, 16)
PicName = f"../Pictures/Rsm{n:02}.jpg"
Im1 = plt.imread(PicName)
Im2 = np.dot(Im1, (0.2989, 0.587, 0.114)).astype("uint8")
Im3 = Im1.mean(axis=2).astype("uint8")
print(PicName)
print(Im1.shape, Im1.dtype)
print(Im2.shape, Im2.dtype)
print(Im3.shape, Im3.dtype)
plt.figure(figsize=(12, 3))
plt.subplot(1, 3, 1)
plt.imshow(Im1)
plt.axis("off")
plt.subplot(1, 3, 2)
plt.imshow(Im2, cmap="gray")
plt.axis("off")
plt.subplot(1, 3, 3)
plt.imshow(Im3, cmap="gray")
plt.axis("off")
plt.show()

Im1 = plt.imread('Pictures/Resim.jpg')
Im2 = Im1.mean(axis=2)
print(Im1.shape)
print(Im2.shape)
plt.figure(figsize=(10, 6))
plt.imshow(Im1)
plt.axis('off')
plt.figure(figsize=(10, 6))
plt.imshow(Im2, cmap='gray')
plt.axis('off')
plt.show()

N = 400
t = np.linspace(0, 2 * np.pi, N)
r = 0.5 + np.cos(t)
x, y = r * np.cos(t), r * np.sin(t)
fig, ax = plt.subplots()
ax.plot(x, y)
plt.show()

x = np.linspace(0, 100, 21)
y = np.sqrt(x)
plt.plot(x, y, 'purple') # line
plt.plot(x, y, 'o')      # dots
plt.show()

t = np.arange(0.01, 5.0, 0.01)
s1 = np.sin(2 * np.pi * t)
s2 = np.exp(-t)
s3 = np.sin(4 * np.pi * t)
ax1 = plt.subplot(311)
plt.plot(t, s1)
plt.setp(ax1.get_xticklabels(), fontsize=6)
# share x only
ax2 = plt.subplot(312, sharex=ax1)
plt.plot(t, s2)
# make these tick labels invisible
plt.setp(ax2.get_xticklabels(), visible=False)
# share x and y
ax3 = plt.subplot(313, sharex=ax1, sharey=ax1)
plt.plot(t, s3)
plt.xlim(0.01, 5.0)
plt.show()

p = np.poly1d([1, -8, 15])
print(p(0))
print(p.roots)
print(p.order)
x = np.linspace(0, 1, 20)
y = np.cos(x) + 0.3*np.random.rand(20)
p = np.poly1d(np.polyfit(x, y, 3))
t = np.linspace(0, 1, 200)
plt.plot(x, y, 'o', t, p(t), '-')
plt.show()

mileposts = np.array([0, 198, 303, 736, 871, 1175, 1475, 1544, 1913, 2448])
distance_array = np.abs(mileposts - mileposts[:, np.newaxis])
print(distance_array)
x, y = np.arange(5), np.arange(5)[:, np.newaxis]
distance = np.sqrt(x ** 2 + y ** 2)
print(distance)
plt.pcolor(distance)
plt.colorbar()
plt.show()

ax.set_xlim(0, 10)
ax.set_ylim(0, 10)

x = np.linspace(0, 3, 20)
y = np.linspace(0, 9, 20)
plt.plot(x, y)
plt.plot(x, y, 'o')
plt.show()

t = np.linspace(0, 3, 101)
print(type(t), len(t), sep="\n")
x = np.sin(2 * np.pi * t)
# plt.figure(figsize=(8, 8))
plt.plot(t, x)
plt.xlabel('Time (s)')
plt.ylabel('Voltage (V)')
plt.title('Fonksiyon')
plt.grid()
# plt.savefig("test.png")
plt.show()

plt.figure()
plt.subplot(111, projection="aitoff")
plt.title("Aitoff")
plt.grid(True)
plt.figure()
plt.subplot(111, projection="hammer")
plt.title("Hammer")
plt.grid(True)
plt.show()

x = np.arange(0, 1, 0.001)
f1, f2 = 3, 4
y1 = np.sin(2 * np.pi * f1 * x)
y2 = np.sin(2 * np.pi * f2 * x)
#plt.subplot(2,1,1)
#plt.axes([.1, .55, .85, .4])
plt.plot(x, y1, "r--")
#plt.subplot(2,1,2)
#plt.axes([.1, .05, .85, .4], facecolor="y")
plt.plot(x, y2, "b:")
plt.axis([0, 1, -1.25, 1.25])
#plt.xlim(0, 1)
#plt.ylim(-1.25, 1.25)
#plt.tight_layout()
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)
fig1 = plt.figure()
plt.plot(x, y1)
plt.plot(x, y2)
fig2 = plt.figure()
plt.subplot(2, 1, 1)
plt.plot(x, y1)
plt.subplot(2, 1, 2)
plt.plot(x, y2)
fig3, ax = plt.subplots(2)
ax[0].plot(x, y1)
ax[1].plot(x, y2)
plt.show()

fig.savefig('resim.png')
plt.savefig("out.png")

a = norm.pdf(35, 10, 25)
plt.plot(L)
plt.show()

plt.figure()
plt.subplot(111, projection="aitoff")
plt.title("Aitoff")
plt.grid(True)
plt.figure()
plt.subplot(111, projection="hammer")
plt.title("Hammer")
plt.grid(True)
plt.show()

t = np.linspace(0, 3, 101)
print(type(t), len(t), sep="\n")
x = np.sin(2 * np.pi * t)
# plt.figure(figsize=(8, 8))
plt.plot(t, x)
plt.xlabel('Time (s)')
plt.ylabel('Voltage (V)')
plt.title('Fonksiyon')
plt.grid()
# plt.savefig("test.png")
plt.show()

a = norm.pdf(35, 10, 25)
plt.plot(L)
plt.show()

x = np.linspace(0, 3, 20)
y = np.linspace(0, 9, 20)
plt.plot(x, y)
plt.plot(x, y, 'o')
plt.show()

mileposts = np.array([0, 198, 303, 736, 871, 1175, 1475, 1544, 1913, 2448])
distance_array = np.abs(mileposts - mileposts[:, np.newaxis])
print(distance_array)
x, y = np.arange(5), np.arange(5)[:, np.newaxis]
distance = np.sqrt(x ** 2 + y ** 2)
print(distance)
plt.pcolor(distance)
plt.colorbar()
plt.show()

p = np.poly1d([1, -8, 15])
print(p(0))
print(p.roots)
print(p.order)
x = np.linspace(0, 1, 20)
y = np.cos(x) + 0.3*np.random.rand(20)
p = np.poly1d(np.polyfit(x, y, 3))
t = np.linspace(0, 1, 200)
plt.plot(x, y, 'o', t, p(t), '-')
plt.show()

# np.random.seed(0)
n = 20
mu = 0 # mean of distribution
sigma = 1 # standard deviation of distribution
a = mu + sigma * np.random.randn(10000)
fig, ax = plt.subplots()
z, x, b = ax.hist(a, n, density=True)
y = np.exp(-0.5*((x - mu)/sigma)**2) / (np.sqrt(2*np.pi)*sigma)
print(type(a), a.shape, a.dtype)
print(b, type(b))
print(x.shape, x.dtype, type(x))
print(x)
print(y.shape, y.dtype, type(y))
print(y)
print(z.shape, z.dtype, type(z))
print(z)
ax.plot(x, y, '--')
ax.set_xlabel("Smarts")
ax.set_ylabel("Probability Density")
ax.set_title(f"$\mu$ = {mu}, $\sigma$ = {sigma}")
fig.tight_layout()
plt.show()

image = np.random.rand(30, 30)
plt.imshow(image, cmap=plt.cm.hot)
plt.colorbar()

x = np.linspace(-10, 10)
plt.plot(x, np.arctan(x))
plt.axis('tight')
plt.show()

plt.plot(x,x,'r--',x,x**2,'bs',x,x**3,'g')
plt.savefig('resim.png',dpi=500,bbox_inches='tight')

plt.savefig('resim.pdf')

fig = plt.figure()
x1 = fig.add_subplot(2,2,1)
data = np.random.randn(50).cumsum()
plt.plot(data,'k--')
x2 = fig.add_subplot(2,2,2)
x3 = fig.add_subplot(2,2,3)
x2.plot(data,'ro--')
x3.plot(data,'b.')

ax.set_xticklabels
ax.set_yticklabels
ax.set_xlabel
ax.set_title
ozellik = {'title':'Grafik Çizim','xlabel':'x ekseni'}
ax.set(**ozellik)
ax.plot(veri1,label='sdasdsda')
ax.legend(loc='best')

rng=np.random.RandomState()
x = np.linspace(0,10,250)
y = np.cumsum(rng.randn(250,6),0)
plt.plot(x,y)
plt.legend('ABCDEF',ncol=2, loc='best')

fig = plt.figure(figsize=(10,5))
ax = fig.add_axes([0,0,1,1])
ax.bar(Classes,List)
plt.show()

plt.figure(figsize=(12,7))
plt.bar(Classes,List)
plt.show()

f = 5
x = np.linspace(0, 1, 1001)
y = np.sin(2*np.pi*f*x)
plt.figure(figsize=(12, 8))
plt.plot(x, y)
plt.title("sin(2$\pi$x)")
plt.xlabel("Time ( sec )")
plt.ylabel("Magnitude")
plt.legend(["Sin Grafiği"])
plt.grid()
plt.show()

fig, ax = plt.subplots(nrows=3, ncols=4, figsize=(10, 6))
print(fig, type(fig), sep="\n", end="\n\n")
print(ax, type(ax), ax.dtype, ax.shape, sep="\n", end="\n\n")
print(ax[0, 0], type(ax[0, 0]), sep="\n", end="\n\n")
print(ax[1, 2], type(ax[1, 2]), sep="\n")
plt.show()

fig = plt.figure(figsize=(10, 6))
ax1 = plt.subplot2grid((3,2), (0, 0), colspan=2, rowspan=2)
ax2 = plt.subplot2grid((3,2), (2, 0))
ax3 = plt.subplot2grid((3,2), (2, 1))
plt.show()

Yıllar = np.arange(1980, 2021)
Büyüme = np.random.randint(-10, 10, len(Yıllar))
print(type(Yıllar), Yıllar.shape, Yıllar.dtype)
print(type(Büyüme), Büyüme.shape, Büyüme.dtype)
plt.figure(figsize=(10, 6))
plt.plot(Yıllar, Büyüme)
plt.title('Büyüme Oranları')
plt.xlabel('Yıllar')
plt.ylabel('Büyüme')
plt.xticks([1980, 1990, 2000, 2010, 2020])
plt.yticks([-12, -6, 0, 6, 12],["-%12","-%6","%0","%6","%12"])
plt.grid()
plt.show()

x = np.linspace(0, 5, 501)
print(x.shape, type(x))
y = np.sin(2*np.pi*x)*np.exp(-0.5*x)
a = range(0,len(x),10)
plt.figure(figsize=(10, 6))
plt.plot(x, y, "g", lw=2)
plt.plot(x[a], y[a], "mo", ms=5)
plt.xlabel("Time (sec)")
plt.ylabel("Amplitude")
plt.show()

t = np.linspace(-6, 6, 1001)
sig = 1 / (1 + np.exp(-t))
plt.axhline(y=0, color="black", linestyle="--")
plt.axhline(y=0.5, color="black", linestyle=":")
plt.axhline(y=1.0, color="black", linestyle="--")
plt.axvline(color="grey")
#plt.axline((0, 0.5), slope=0.25, color="black", linestyle=(0, (5, 5)))
plt.plot(t, sig, linewidth=2, label=r"$\sigma(t) = \frac{1}{1 + e^{-t}}$")
plt.xlim(-6, 6)
plt.xlabel("x label")
plt.legend(fontsize=14)
plt.show()

x = np.linspace(-4, 4, 1000)
plt.plot(x, np.cosh(x))
plt.show()

fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(10, 6))
print(fig, type(fig), "", sep="\n")
print(ax, type(ax), ax.shape, "", sep="\n")
print(ax[0, 0], type(ax[0, 0]), "", sep="\n")
print(ax[1, 2], type(ax[1, 2]), sep="\n")
plt.show()

fig = plt.figure(figsize=(10, 6))
ax1 = plt.subplot2grid((3,2), (0, 0), colspan=2, rowspan=2)
ax2 = plt.subplot2grid((3,2), (2, 0))
ax3 = plt.subplot2grid((3,2), (2, 1))
print(fig, type(fig), "", sep="\n")
print(ax1, type(ax1), "", sep="\n")
print(ax2, type(ax2), "", sep="\n")
print(ax3, type(ax3), sep="\n")
plt.show()

yillar = np.arange(1999,2017)
buyume = [-4, 7, -6, -5, 5.6, 9.6, 9, 7.1, 5, .8, -4.7, 8, 11, 5, 8, 5, 6, 3.5]
print(len(yillar),len(buyume))
plt.plot(yillar,buyume)
plt.title('Büyüme Oranları')
plt.xlabel('Yıllar')
plt.ylabel('Büyüme')
plt.xticks([2000, 2005, 2010, 2015])
plt.yticks([-5, 0, 5, 10],['-%5','%0','%5','%15'])
plt.show()

x1 = np.linspace(0, 5)
x2 = np.linspace(0, 2)
print(type(x1), x1.shape, sep='\n')
print(type(x2), x2.shape, sep='\n')
y1 = np.cos(2 * np.pi * x1) * np.exp(-x1)
y2 = np.cos(2 * np.pi * x2)
plt.subplot(2, 1, 1)
plt.plot(x1, y1, 'o-')
plt.title('A tale of 2 subplots')
plt.ylabel('Damped oscillation')
plt.subplot(2, 1, 2)
plt.plot(x2, y2, '.-')
plt.xlabel('time (s)')
plt.ylabel('Undamped')
plt.show()

np.random.seed(0)
mu = 10    # mean of distribution
sigma = 15  # standard deviation of distribution
x = mu + sigma * np.random.randn(1000)
print(type(x), x.shape, sep='\n')
num_bins = 50
fig, ax = plt.subplots()
n, bins, patches = ax.hist(x, num_bins, density=True)
y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
ax.plot(bins, y, '--')
ax.set_xlabel('Smarts')
ax.set_ylabel('Probability density')
ax.set_title(r'$\mu=10$, $\sigma=15$')
fig.tight_layout()
plt.show()

t = np.linspace(-10, 10, 101)
sig = 1 / (1 + np.exp(-t))
plt.axhline(y=0, color="black", linestyle="--")
plt.axhline(y=0.5, color="black", linestyle=":")
plt.axhline(y=1.0, color="black", linestyle="--")
plt.axvline(color="grey")
#plt.axline((0, 0.5), slope=0.25, color="black", linestyle=(0, (5, 5)))
plt.plot(t, sig, linewidth=2, label=r"$\sigma(t) = \frac{1}{1 + e^{-t}}$")
plt.xlim(-10, 10)
plt.xlabel("t")
plt.legend(fontsize=14)
plt.show()

np.random.seed(0)
data = np.random.randn(2, 100)
fig, axs = plt.subplots(2, 2, figsize=(10, 6))
axs[0, 0].hist(data[0])
axs[1, 0].scatter(data[0], data[1])
axs[0, 1].plot(data[0], data[1])
axs[1, 1].hist2d(data[0], data[1])
print(fig)
print(axs)
plt.show()

t = np.arange(0.0, 2.0, 0.01)
s = 1 + np.sin(2 * np.pi * t)
fig, ax = plt.subplots()
ax.plot(t, s)
ax.set(xlabel='time (s)', ylabel='voltage (mV)',
       title='About as simple as it gets, folks')
ax.grid()
fig.savefig("test.png")
plt.show()

image = np.random.rand(30, 30)
plt.imshow(image, cmap=plt.cm.hot)
plt.colorbar()
plt.show()

from scipy import misc
img = misc.face()
print(type(img))
print(img.shape)
print(img.ndim)
print(img[:, :, 0].shape)
a = img[0:5, 0:3, 0]
print(a)
print(a/255)
print(img.dtype)
img2 = img @ [0.2126, 0.7152, 0.0722]
plt.imshow(img)
#plt.imshow(img2)
#plt.imshow(img2, cmap="gray")
plt.show()

n = np.random.randint(0, 16)
PicName = f"../Pictures/Rsm{n:02}.jpg"
Im1 = plt.imread(PicName)
Im2 = np.dot(Im1, (0.2989, 0.587, 0.114)).astype("uint8")
Im3 = Im1.mean(axis=2).astype("uint8")
print(PicName)
print(Im1.shape, Im1.dtype)
print(Im2.shape, Im2.dtype)
print(Im3.shape, Im3.dtype)
plt.figure(figsize=(12, 3))
plt.subplot(1, 3, 1)
plt.imshow(Im1)
plt.axis("off")
plt.subplot(1, 3, 2)
plt.imshow(Im2, cmap="gray")
plt.axis("off")
plt.subplot(1, 3, 3)
plt.imshow(Im3, cmap="gray")
plt.axis("off")
plt.show()

Im1 = plt.imread('Pictures/Resim.jpg')
Im2 = Im1.mean(axis=2)
print(Im1.shape)
print(Im2.shape)
plt.figure(figsize=(10, 6))
plt.imshow(Im1)
plt.axis('off')
plt.figure(figsize=(10, 6))
plt.imshow(Im2, cmap='gray')
plt.axis('off')
plt.show()

N = 400
t = np.linspace(0, 2 * np.pi, N)
r = 0.5 + np.cos(t)
x, y = r * np.cos(t), r * np.sin(t)
fig, ax = plt.subplots()
ax.plot(x, y)
plt.show()

x = np.linspace(0, 100, 21)
y = np.sqrt(x)
plt.plot(x, y, 'purple') # line
plt.plot(x, y, 'o')      # dots
plt.show()

t = np.arange(0.01, 5.0, 0.01)
s1 = np.sin(2 * np.pi * t)
s2 = np.exp(-t)
s3 = np.sin(4 * np.pi * t)
ax1 = plt.subplot(311)
plt.plot(t, s1)
plt.setp(ax1.get_xticklabels(), fontsize=6)
# share x only
ax2 = plt.subplot(312, sharex=ax1)
plt.plot(t, s2)
# make these tick labels invisible
plt.setp(ax2.get_xticklabels(), visible=False)
# share x and y
ax3 = plt.subplot(313, sharex=ax1, sharey=ax1)
plt.plot(t, s3)
plt.xlim(0.01, 5.0)
plt.show()

p = np.poly1d([1, -8, 15])
print(p(0))
print(p.roots)
print(p.order)
x = np.linspace(0, 1, 20)
y = np.cos(x) + 0.3*np.random.rand(20)
p = np.poly1d(np.polyfit(x, y, 3))
t = np.linspace(0, 1, 200)
plt.plot(x, y, 'o', t, p(t), '-')
plt.show()

mileposts = np.array([0, 198, 303, 736, 871, 1175, 1475, 1544, 1913, 2448])
distance_array = np.abs(mileposts - mileposts[:, np.newaxis])
print(distance_array)
x, y = np.arange(5), np.arange(5)[:, np.newaxis]
distance = np.sqrt(x ** 2 + y ** 2)
print(distance)
plt.pcolor(distance)
plt.colorbar()
plt.show()

ax.set_xlim(0, 10)
ax.set_ylim(0, 10)

x = np.linspace(0, 3, 20)
y = np.linspace(0, 9, 20)
plt.plot(x, y)
plt.plot(x, y, 'o')
plt.show()

t = np.linspace(0, 3, 101)
print(type(t), len(t), sep="\n")
x = np.sin(2 * np.pi * t)
# plt.figure(figsize=(8, 8))
plt.plot(t, x)
plt.xlabel('Time (s)')
plt.ylabel('Voltage (V)')
plt.title('Fonksiyon')
plt.grid()
# plt.savefig("test.png")
plt.show()

plt.figure()
plt.subplot(111, projection="aitoff")
plt.title("Aitoff")
plt.grid(True)
plt.figure()
plt.subplot(111, projection="hammer")
plt.title("Hammer")
plt.grid(True)
plt.show()

x = np.arange(0, 1, 0.001)
f1, f2 = 3, 4
y1 = np.sin(2 * np.pi * f1 * x)
y2 = np.sin(2 * np.pi * f2 * x)
#plt.subplot(2,1,1)
#plt.axes([.1, .55, .85, .4])
plt.plot(x, y1, "r--")
#plt.subplot(2,1,2)
#plt.axes([.1, .05, .85, .4], facecolor="y")
plt.plot(x, y2, "b:")
plt.axis([0, 1, -1.25, 1.25])
#plt.xlim(0, 1)
#plt.ylim(-1.25, 1.25)
#plt.tight_layout()
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)
fig1 = plt.figure()
plt.plot(x, y1)
plt.plot(x, y2)
fig2 = plt.figure()
plt.subplot(2, 1, 1)
plt.plot(x, y1)
plt.subplot(2, 1, 2)
plt.plot(x, y2)
fig3, ax = plt.subplots(2)
ax[0].plot(x, y1)
ax[1].plot(x, y2)
plt.show()

fig.savefig('resim.png')
plt.savefig("out.png")

a = norm.pdf(35, 10, 25)
plt.plot(L)
plt.show()

plt.figure()
plt.subplot(111, projection="aitoff")
plt.title("Aitoff")
plt.grid(True)
plt.figure()
plt.subplot(111, projection="hammer")
plt.title("Hammer")
plt.grid(True)
plt.show()

t = np.linspace(0, 3, 101)
print(type(t), len(t), sep="\n")
x = np.sin(2 * np.pi * t)
# plt.figure(figsize=(8, 8))
plt.plot(t, x)
plt.xlabel('Time (s)')
plt.ylabel('Voltage (V)')
plt.title('Fonksiyon')
plt.grid()
# plt.savefig("test.png")
plt.show()

a = norm.pdf(35, 10, 25)
plt.plot(L)
plt.show()

x = np.linspace(0, 3, 20)
y = np.linspace(0, 9, 20)
plt.plot(x, y)
plt.plot(x, y, 'o')
plt.show()

mileposts = np.array([0, 198, 303, 736, 871, 1175, 1475, 1544, 1913, 2448])
distance_array = np.abs(mileposts - mileposts[:, np.newaxis])
print(distance_array)
x, y = np.arange(5), np.arange(5)[:, np.newaxis]
distance = np.sqrt(x ** 2 + y ** 2)
print(distance)
plt.pcolor(distance)
plt.colorbar()
plt.show()

p = np.poly1d([1, -8, 15])
print(p(0))
print(p.roots)
print(p.order)
x = np.linspace(0, 1, 20)
y = np.cos(x) + 0.3*np.random.rand(20)
p = np.poly1d(np.polyfit(x, y, 3))
t = np.linspace(0, 1, 200)
plt.plot(x, y, 'o', t, p(t), '-')
plt.show()

# np.random.seed(0)
n = 20
mu = 0 # mean of distribution
sigma = 1 # standard deviation of distribution
a = mu + sigma * np.random.randn(10000)
fig, ax = plt.subplots()
z, x, b = ax.hist(a, n, density=True)
y = np.exp(-0.5*((x - mu)/sigma)**2) / (np.sqrt(2*np.pi)*sigma)
print(type(a), a.shape, a.dtype)
print(b, type(b))
print(x.shape, x.dtype, type(x))
print(x)
print(y.shape, y.dtype, type(y))
print(y)
print(z.shape, z.dtype, type(z))
print(z)
ax.plot(x, y, '--')
ax.set_xlabel("Smarts")
ax.set_ylabel("Probability Density")
ax.set_title(f"$\mu$ = {mu}, $\sigma$ = {sigma}")
fig.tight_layout()
plt.show()

